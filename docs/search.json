[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Программирование на R для филологов",
    "section": "",
    "text": "Введение",
    "crumbs": [
      "Введение"
    ]
  },
  {
    "objectID": "index.html#об-этом-курсе",
    "href": "index.html#об-этом-курсе",
    "title": "Программирование на R для филологов",
    "section": "Об этом курсе",
    "text": "Об этом курсе\nЭтот сайт содержит материалы к курсу “Программирование на R для филологов” для магистерской программы НИУ ВШЭ “Русская литература и компаративистика”.",
    "crumbs": [
      "Введение"
    ]
  },
  {
    "objectID": "index.html#программа",
    "href": "index.html#программа",
    "title": "Программирование на R для филологов",
    "section": "Программа",
    "text": "Программа\nКурс 2025/2026 г. читается два модуля и включает в себя 8 основных тем.\nМодуль 1. Основы работы в R\n\nНачало работы. Контроль версий.\nТабличные данные. Анализ датасета.\nРаспознавание изображений.\nНормализация. Регулярные выражения.\n\nМодуль 2. Редакторские инструменты\n\nОсновы работы с XML в R.\nРазметка TEI XML.\n\nДобавление разметки с использованием LLM.\nПубликационная система Quarto.",
    "crumbs": [
      "Введение"
    ]
  },
  {
    "objectID": "index.html#расписание",
    "href": "index.html#расписание",
    "title": "Программирование на R для филологов",
    "section": "Расписание",
    "text": "Расписание\nЗанятия в первом модуле: 6 и 13 сентября, 4 и 18 октября Занятия во втором модуле: 1, 15 и 29 ноября, 13 декабря",
    "crumbs": [
      "Введение"
    ]
  },
  {
    "objectID": "index.html#система-оценивания",
    "href": "index.html#система-оценивания",
    "title": "Программирование на R для филологов",
    "section": "Система оценивания",
    "text": "Система оценивания\nДве домашние, одна лабораторная и итоговый проект в каждом модуле.",
    "crumbs": [
      "Введение"
    ]
  },
  {
    "objectID": "index.html#благодарности",
    "href": "index.html#благодарности",
    "title": "Программирование на R для филологов",
    "section": "Благодарности",
    "text": "Благодарности\nВ разработке этого курса мне помогало множество людей: Дарья Глебова, Антонина Мартыненко, Александра Горшенина, Георгий Мороз, Борис Орехов, Софья Порфирьева, Анастасия Орлова и многие другие. Все недостатки остаются на моей совести.",
    "crumbs": [
      "Введение"
    ]
  },
  {
    "objectID": "index.html#обратная-связь",
    "href": "index.html#обратная-связь",
    "title": "Программирование на R для филологов",
    "section": "Обратная связь",
    "text": "Обратная связь\nЭтот курс находится в разработке. Если вы заметили ошибку или опечатку, можно сообщить по почте oalieva@hse.ru или оставить issue в репозитории курса на GitHub.",
    "crumbs": [
      "Введение"
    ]
  },
  {
    "objectID": "01_start.html",
    "href": "01_start.html",
    "title": "1  Начало работы",
    "section": "",
    "text": "1.1 Установка R и RStudio\nМы будем использовать R, так что для занятий понадобятся:\nМы будем использовать следующую версию R:\nR version 4.5.0 (2025-04-11)\nМожно работать в облаке:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Начало работы</span>"
    ]
  },
  {
    "objectID": "01_start.html#установка-r-и-rstudio",
    "href": "01_start.html#установка-r-и-rstudio",
    "title": "1  Начало работы",
    "section": "",
    "text": "R\n\nна Windows\nна Mac\nна Linux.\n\nRStudio — IDE для R (можно скачать здесь)\n\n\n\n\n\nRStudio cloud — полная функциональность RStudio с некоторыми ограничениями;",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Начало работы</span>"
    ]
  },
  {
    "objectID": "01_start.html#знакомство-с-rstudio",
    "href": "01_start.html#знакомство-с-rstudio",
    "title": "1  Начало работы",
    "section": "1.2 Знакомство с RStudio",
    "text": "1.2 Знакомство с RStudio\nRStudio — основная среда разработки (IDE) для R. После установки R и RStudio можно открыть RStudio и перед вами предстанет что-то похожее на изображение ниже:\n\n\n\nRStudio при первом открытии\n\n\nПосле нажатия на двойное окошко чуть левее надписи Environment откроется окно скрипта.\n\n\n\nПодокна RStudio\n\n\nВсе следующие команды можно:\n\nвводить в окне консоли, и тогда для исполнения следует нажимать клавишу Enter.\nвводить в окне скрипта, и тогда для исполнения следует нажимать клавиши Ctrl/Cmd + Enter или на команду Run на панели окна скрипта. Все, что введено в окне скрипта можно редактировать как в любом текстовом редакторе, в том числе сохранять Ctrl/Cmd + S.\n\nДля начала попробуйте получить информацию о сессии, введя в консоли такую команду:\n\nsessionInfo()\n\nsessionInfo() – это функция. О функциях можно думать как о глаголах (“сделай то-то!”). За названием функции всегда следуют круглые скобки, внутри которых могут находиться аргументы функции. Аргументы – это что-то вроде дополнений и обстоятельств. Аргументы могут быть обязательные и необязательные.\nЧтобы узнать, каких аргументов требует функция, надо вызывать help: ?mean(). В правой нижней панели появится техническая документация. Но также можно воспользоваться функцией args(). Попробуйте набрать в консоли args(round).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Начало работы</span>"
    ]
  },
  {
    "objectID": "01_start.html#пакеты",
    "href": "01_start.html#пакеты",
    "title": "1  Начало работы",
    "section": "1.3 Пакеты",
    "text": "1.3 Пакеты\nПосле установки R вы получите доступ к уже готовым методам статистического анализа и инструментам для визуализации. Если в базовой инсталляции R нет нужного решения – надо поискать в библиотеке пакетов. Пакет – это набор функций и иногда датасетов, созданный пользователями. На 1 июля 2023 г. в репозитории CRAN доступно 19789 пакетов. И это далеко не все: многие пакеты доступны только на GitHub.\n\n\n\n\n\n\nНа заметку\n\n\n\nНекоторые функции, которые вы найдете в пакетах, частично дублируют друг друга – это нормально, как и в естественном языке, “сказать” что-то можно разными способами.\n\n\nПо технической документации и так называемым “виньеткам” можно понять, какой пакет вам нужен. Например, вот так выглядит виньетка пакета RPerseus, при помощи которого можно получить доступ к корпусу греческой и латинской литературы.\nБывают еще “пакеты пакетов”, то есть очень большие семейства функций, своего рода “диалекты” R. Таково семейство tidyverse, объединяемое идеологией “опрятных” данных. Про него мы еще будем говорить.\nПакеты для работы устанавливаются один раз, однако подключать их надо во время каждой сессии. Чтобы установить новый пакет, можно воспользоваться меню Tools &gt; Install Packages. Также можно устанавливать пакеты из консоли.\nУстановим библиотеку:\n\ninstall.packages(\"tidyverse\")\n\nДля подключения используем функцию library(), которой передаем в качестве аргумента название пакета без кавычек:\n\nlibrary(tidyverse)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Начало работы</span>"
    ]
  },
  {
    "objectID": "01_start.html#рабочая-директория",
    "href": "01_start.html#рабочая-директория",
    "title": "1  Начало работы",
    "section": "1.4 Рабочая директория",
    "text": "1.4 Рабочая директория\nПеред началом работы проверьте свою рабочую директорию при помощи getwd(). Для смены можно использовать как абсолютный, так и относительный путь:\n\nsetwd(\"/Users/name/folder\")\n\n# искать в текущей директории\nsetwd(\"./folder\")\n\n# перейти на уровень вверх\nsetwd(\"../\")\n\nТакже для выбора рабочей директории можно использовать меню R Session &gt; Set Working Directory. А теперь – первое задание.\nЕсли все получилось, двигаемся дальше.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Начало работы</span>"
    ]
  },
  {
    "objectID": "01_start.html#работа-с-файлами",
    "href": "01_start.html#работа-с-файлами",
    "title": "1  Начало работы",
    "section": "1.5 Работа с файлами",
    "text": "1.5 Работа с файлами\nСоздание пустого файла и папки\n\nfile.create(\"notes.txt\")      # TRUE, если создан\ndir.create(\"data\")  \n\nЗапись текста построчно\n\nlines &lt;- c(\"Первая строка\", \"Вторая строка\")\nwriteLines(lines, \"notes.txt\")\n\nЗапись таблиц пока не рассматриваем =)\nПроверка существования и удаление\n\nfile.exists(\"notes.txt\")  \nfile.remove(\"notes.txt\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Начало работы</span>"
    ]
  },
  {
    "objectID": "01_start.html#r-как-калькулятор",
    "href": "01_start.html#r-как-калькулятор",
    "title": "1  Начало работы",
    "section": "1.6 R как калькулятор",
    "text": "1.6 R как калькулятор\nМожно использовать R как калькулятор. Для этого вводим данные рядом с символом приглашения &gt;, который называется prompt.\n\nsqrt(4) # квадратный корень\n\n[1] 2\n\n2^3 # степень\n\n[1] 8\n\nlog10(100) #логарифм\n\n[1] 2\n\n\nЕсли в начале консольной строки стоит +, значит предыдущий код не завершен. Например, вы забыли закрыть скобку функции. Ее можно дописать на следующей строке. Попробуйте набрать sqrt(2 в консоли.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Начало работы</span>"
    ]
  },
  {
    "objectID": "01_start.html#операторы-присваивания",
    "href": "01_start.html#операторы-присваивания",
    "title": "1  Начало работы",
    "section": "1.7 Операторы присваивания",
    "text": "1.7 Операторы присваивания\nЧтобы в окружении появился новый объект, надо присвоить результат вычислений какой-нибудь переменной при помощи оператора присваивания &lt;- (Alt + - (Windows) или Option + - (Mac)). Знак = также работает как оператор присваивания, но не во всех контекстах, поэтому им лучше не пользоваться.\n\nx &lt;- 2 + 2 # создаем переменную\ny &lt;- 0.1 # создаем еще одну переменную\nx &lt;- y # переназначаем  \nx + y\n\n[1] 0.2\n\n\nСочетание клавиш для оператора присваивания: Option/Alt + -. Имя переменной, как и имя функции, может содержать прописные и строчные буквы, точку и знак подчеркивания.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Начало работы</span>"
    ]
  },
  {
    "objectID": "01_start.html#пайпы-конвееры",
    "href": "01_start.html#пайпы-конвееры",
    "title": "1  Начало работы",
    "section": "1.8 Пайпы (конвееры)",
    "text": "1.8 Пайпы (конвееры)\nВ нашем коде мы часто будем использовать знаки конвеера (или пайпы): |&gt; (в вашей версии он может выглядить иначе: %&gt;%; переключить оператор можно в Global Options). Они призваны показывать последовательность действий. Сочетание клавиш: Ctrl/Cmd + Shift + M.\n\nmean(sqrt(abs(sin(1:100)))) \n\n[1] 0.7654264\n\n1:100 |&gt; \n  sin() |&gt; \n  abs() |&gt; \n  sqrt() |&gt; \n  mean()\n\n[1] 0.7654264",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Начало работы</span>"
    ]
  },
  {
    "objectID": "01_start.html#контроль-версий",
    "href": "01_start.html#контроль-версий",
    "title": "1  Начало работы",
    "section": "1.9 Контроль версий",
    "text": "1.9 Контроль версий\nСначала надо создать учетную запись на GitHub. https://github.com/\nПотом поставить локально Git https://git-scm.com/downloads.\n\n1.9.1 Настройка Git (один раз)\n\nОткройте терминал (Git Bash на Windows или Terminal на macOS).\nУкажите имя, email (тот же, что на GitHub), и ветку по умолчанию.\n\ngit config --global user.name \"Ваше Имя\"\ngit config --global user.email your_email@example.com\ngit config --global init.defaultBranch main\ngit config --list\n\n\n1.9.2 Связь RStudio с Git\n\nВ RStudio: Tools &gt; Global Options &gt; Git/SVN.\nУбедитесь, что выбран Git и путь к git.exe (или git) корректен. Нажмите Apply/OK.\n\nУстановите связь RStudio с GitHub (SSH-ключ):\n\nВ RStudio: Tools &gt; Global Options &gt; Git/SVN &gt; Create RSA Key → дождитесь генерации → Close.\nНажмите View public key и скопируйте ключ.\nНа GitHub: Settings &gt; SSH and GPG keys &gt; New SSH key. Вставьте публичный ключ, дайте понятный Title, подтвердите.\n\n\n\n1.9.3 Создание репозитория и проекта RStudio\n\nНа GitHub: New repository → задайте имя и описание → Create repository. Скопируйте SSH-URL вида git@github.com:username/repo.git.\nВ RStudio: File &gt; New Project &gt; Version Control &gt; Git → вставьте URL, выберите папку → Create Project.\n\nRStudio создаст локальный проект, связанный с репозиторием на GitHub.\n\n\n1.9.4 Базовый рабочий цикл\n\nВнесите изменения в файлы проекта.\nВо вкладке Git в RStudio: отметьте (Stage) нужные файлы → Commit (введите сообщение) → Push (отправка на GitHub).\nДля получения изменений из GitHub используйте Pull.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Начало работы</span>"
    ]
  },
  {
    "objectID": "01_start.html#видео-к-этому-уроку-2024",
    "href": "01_start.html#видео-к-этому-уроку-2024",
    "title": "1  Начало работы",
    "section": "1.10 Видео к этому уроку (2024)",
    "text": "1.10 Видео к этому уроку (2024)\n\nНачало работы\nGit",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Начало работы</span>"
    ]
  },
  {
    "objectID": "02_tabular.html",
    "href": "02_tabular.html",
    "title": "2  Табличные данные. Анализ датасета",
    "section": "",
    "text": "3 Импорт данных\nВ этом уроке мы научимся работать с “прямоугольными”, т.е. табличными, данными на примере корпуса русской элегии 1815—1835 гг., собранного и опубликованного Антониной Мартыненко в 2020 г.\nСуществуют два основных “диалекта” R, один из которых опирается главным образом на функции и структуры данных базового R, а другой пользуется синтаксисом tidyverse. Tidyverse – это семейство пакетов (метапакет), разработанных Хадли Уикхемом и др., которое включает в себя в том числе пакеты dplyr, ggplot2 и многие другие.\nelegies_tbl &lt;- read_tsv(\"../datasets/elegies/elegies_metadata.tab\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Табличные данные. Анализ датасета</span>"
    ]
  },
  {
    "objectID": "02_tabular.html#dplyr",
    "href": "02_tabular.html#dplyr",
    "title": "2  Табличные данные. Анализ датасета",
    "section": "4.1 Dplyr",
    "text": "4.1 Dplyr\n“Грамматика манипуляции данных”, лежащая в основе dplyr, предоставляет последовательный набор глаголов, которые помогают решать наиболее распространенные задачи манипулирования данными:\n\nmutate() добавляет новые переменные, которые являются функциями существующих переменных;\nselect() выбирает переменные (столбцы) на основе их имен;\nfilter() выбирает наблюдения (ряды) на основе их значений;\nsummarise() обобщает значения;\narrange() изменяет порядок следования строк.\n\nВсе эти глаголы естественным образом сочетаются с функцией group_by(), которая позволяет выполнять любые операции “по группам”, и с оператором pipe |&gt; из пакета magrittr.\nВ итоге получается более лаконичный и читаемый код. Узнаем, за какие года у нас есть элегии.\n\nelegies_tbl |&gt; \n  count(Year) \n\n\n  \n\n\n\nОтберем элегии 1824 г. и выясним, какие авторы их писали.\n\nelegies_tbl |&gt; \n  filter(Year == 1824) |&gt; \n  count(Author) |&gt; \n  arrange(-n)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Табличные данные. Анализ датасета</span>"
    ]
  },
  {
    "objectID": "02_tabular.html#обобщение-данных",
    "href": "02_tabular.html#обобщение-данных",
    "title": "2  Табличные данные. Анализ датасета",
    "section": "4.2 Обобщение данных",
    "text": "4.2 Обобщение данных\nПопробуйте сформулировать новые вопросы и ответить на них при помощи этого датасета.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Табличные данные. Анализ датасета</span>"
    ]
  },
  {
    "objectID": "02_tabular.html#визуализации",
    "href": "02_tabular.html#визуализации",
    "title": "2  Табличные данные. Анализ датасета",
    "section": "4.3 Визуализации",
    "text": "4.3 Визуализации\nВ tidyverse входит пакет ggplot2 для визуализации данных. В его основе лежит идея “грамматики графических элементов” Лиланда Уилкинсона (Мастицкий 2017) (отсюда “gg” в названии).\nФункция ggplot() имеет два основных аргумента: data и mapping. Аргумент mapping задает эстетические атрибуты геометрических объектов. Обычно используется в виде mapping = aes(x, y), где aes() означает aesthetics.\nПод “эстетикой” подразумеваются графические атрибуты, такие как размер, форма или цвет. Вы не увидите их на графике, пока не добавите какие-нибудь “геомы” – геометрические объекты (точки, линии, столбики и т.п.). Эти объекты могут слоями накладываться друг на друга (Wickham и Grolemund 2016).\n\nДиаграмма рассеяния (scatter plot) подходит для отражения связи между двумя переменными и делается при помощи geom_point().\nДля визуализации распределений качественных переменных подходит стобиковая диаграмма (barplot), которая наглядно показывает число наблюдений в каждой группе.\nДиаграмма размаха (boxplot) создается функцией geom_boxplot() и эффективно показывает распределение количественной переменной, включая медиану, квартили и выбросы.\nЛинейные графики создаются с помощью geom_line() и подходят для отображения изменений во времени или зависимости одной переменной от другой.\nГистограммы строятся функцией geom_histogram() и показывают распределение одной количественной переменной.\nДиаграммы плотности создаются при помощи geom_density() и представляют собой сглаженный вариант гистограммы.\n\nВажной особенностью ggplot2 является возможность комбинирования различных слоев. Например, можно наложить линию тренда на диаграмму рассеяния.\nКаждый геометрический объект может иметь свои специфические параметры. Например, geom_point() может варьировать размер, цвет, форму и прозрачность точек, а geom_line() — тип, толщину и цвет линии. Эти параметры можно задавать как внутри aes() (когда они зависят от данных), так и вне её (когда задаются константы).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Табличные данные. Анализ датасета</span>"
    ]
  },
  {
    "objectID": "02_tabular.html#для-самостоятельной-работы",
    "href": "02_tabular.html#для-самостоятельной-работы",
    "title": "2  Табличные данные. Анализ датасета",
    "section": "4.4 Для самостоятельной работы",
    "text": "4.4 Для самостоятельной работы\nДатасет “Корпус русской песни” 1800-1840 г., составитель Артем Шеля.\n\n\n\n\nWickham, Hadley, и Garrett Grolemund. 2016. R for Data Science. O’Reilly. https://r4ds.had.co.nz/index.html.\n\n\nМастицкий, Сергей. 2017. Визуализация данных с помощью ggplot2. ДМК.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Табличные данные. Анализ датасета</span>"
    ]
  },
  {
    "objectID": "03_ocr.html",
    "href": "03_ocr.html",
    "title": "3  Распознавание изображений",
    "section": "",
    "text": "3.1 Что такое OCR и tesseract\nВ этом уроке мы освоим основной инструмент для распознавания печатного текста в R – пакет tesseract, а также научимся дообучать модели под конкретные задачи и шрифты.\nOCR (Optical Character Recognition) — это технология автоматического распознавания печатного текста на изображениях и преобразования его в машинно-читаемый формат. Эта технология позволяет “извлекать” текст из сканированных документов, фотографий, PDF-файлов и других графических форматов.\nTesseract — это одна из самых популярных библиотек OCR с открытым исходным кодом, разработанная компанией Google. Tesseract поддерживает более 100 языков и может работать с различными типами изображений и форматами документов.\nПакет tesseract в R представляет собой обертку для библиотеки Tesseract, которая позволяет:\nВ отличие от онлайн-сервисов OCR, пакет tesseract работает локально, что обеспечивает:\nОднако качество распознавания сильно зависит от качества исходного изображения, типа шрифта, языка документа и правильности настройки параметров. Именно поэтому важно уметь не только использовать готовые модели, но и дообучать их под специфические задачи.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Распознавание изображений</span>"
    ]
  },
  {
    "objectID": "03_ocr.html#что-такое-ocr-и-tesseract",
    "href": "03_ocr.html#что-такое-ocr-и-tesseract",
    "title": "3  Распознавание изображений",
    "section": "",
    "text": "Распознавать текст с изображений различных форматов (PNG, JPEG, TIFF, PDF)\nРаботать с многостраничными документами\nИспользовать предобученные модели для разных языков (список)\nНастраивать параметры распознавания под конкретные задачи\nДообучать модели для улучшения качества распознавания специфических шрифтов или типов документов\n\n\n\nКонфиденциальность — данные не передаются третьим лицам\nСкорость — нет задержек на передачу данных по сети\nНастраиваемость — возможность тонкой настройки под конкретные задачи\nИнтеграция — seamless integration с экосистемой R для дальнейшего анализа данных",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Распознавание изображений</span>"
    ]
  },
  {
    "objectID": "03_ocr.html#данные",
    "href": "03_ocr.html#данные",
    "title": "3  Распознавание изображений",
    "section": "3.2 Данные",
    "text": "3.2 Данные\nВ качестве упражнения мы возьмем ч. 6 № 6 журнала “Невский зритель” за 1821 г. (источник).\nЖурнал «Невский зритель» издавался в Петербурге ежемесячно с января 1820 г. по июнь 1821 г. Всего вышло 18 книжек журнала, составивших 6 частей. Все они доступны на сайте “Пушкинского дома”.\nОфициальным издателем журнала был выпускник Московского университета Иван Матвеевич Сниткин (род. ок. 1792 г.). С января по апрель 1820 г. соиздателем «Невского зрителя» был В. К. Кюхельбекер; намеревался войти в число издателей и К. Ф. Рылеев (1797-1826), активный сотрудник журнала с октября 1820-го по февраль 1821 г.\nВ научной литературе не сложилось единого взгляда на идеологическую и литературно-критическую направленность журнала.\nРазногласия в оценках объясняются противоречивостью статей, помещенных на страницах журнала за время его существования. Некоторые исследователи относят «Невский зритель» к кругу изданий декабристской ориентированности. «Невский зритель» оказался заметным явлением в журналистике 20-х гг. 19-го века, в нем печатались произведения Пушкина: стихотворения «Дориде» (№ 1. С. 96), «Дорида» (№ 2. С. 92), «Кюхельбекеру» («В последний раз, в сени уединенья»), «Прелестнице», «Мадригал М…ой» (все три: № 4. С. 66-68), отрывок из первой песни «Руслана и Людмилы», стихотворения Кюхельбекера, Жуковского, Баратынского, Дельвига, Рылеева, поместившего в октябрьской книжке 1820 г. острейшую сатиру на Аракчеева «К временщику».\nСовременные исследователи «Невского зрителя» выделяют два периода в эволюции журнала. Первый - январь-апрель 1820 г. Ведущий сотрудник в разделах «Литература» и «Критика» - Кюхельбекер; активно печатаются Пушкин, Баратынский, Дельвиг. Второй период - май-сентябрь 1820 г. Полностью прекращается сотрудничество с журналом всей группы молодых литераторов. Журнал наводняется эпигонскими произведениями Д. Хвостова, Ф. Синельникова, Г. П. Кругликова и М. А. Яковлева. В разделе «Критика» звучат громкие дифирамбы Хвостову. В этот же период появляется статья о «Руслане и Людмиле» с резкими нападками на поэму. (Источник описания.)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Распознавание изображений</span>"
    ]
  },
  {
    "objectID": "03_ocr.html#вырезать-страницы",
    "href": "03_ocr.html#вырезать-страницы",
    "title": "3  Распознавание изображений",
    "section": "3.3 Вырезать страницы",
    "text": "3.3 Вырезать страницы\nДля упражнения мы возьмем пока лишь 2 страницы из всего выпуска. Легко вырезать их в R можно так:\n\nlibrary(qpdf)\nmy_files &lt;- list.files(\"../ocr\", pattern = \"pdf\", full.names = TRUE)\nmy_files\n\n[1] \"../ocr/recognize_my_pdf.py\"                       \n[2] \"../ocr/Невский зритель. 1821. Ч. 6. № 6. Июнь.pdf\"\n[3] \"../ocr/НЗ1821_6_6[50-51].pdf\"                     \n\n\n\npdf_subset(input = my_files[2],\n           output = \"../ocr/НЗ1821_6_6[50-51].pdf\",\n           pages = 50:51)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Распознавание изображений</span>"
    ]
  },
  {
    "objectID": "03_ocr.html#извлечение-текста-из-pdf",
    "href": "03_ocr.html#извлечение-текста-из-pdf",
    "title": "3  Распознавание изображений",
    "section": "3.4 Извлечение текста из pdf",
    "text": "3.4 Извлечение текста из pdf\nЕсли вам повезло, то pdf хранит уже распознанный текст.\n\nlibrary(pdftools)\n\nUsing poppler version 23.04.0\n\nlibrary(tesseract)\n\n\ntext1 &lt;- pdf_text(pdf = \"../ocr/НЗ1821_6_6[50-51].pdf\")\ncat(text1)\n\nЭЭСЮЭЭЭЭЭСКЮЭЭЭЭЭСЮС»ЭЭЭ&lt;Э&lt;ЗС&gt;Э(ІЭ(99ЭС933 э о э з о з э з э\n\n                   РАЗЛУКА.\n                     ( Э л е г і я ,)\n\n\n\nРозалія, мой спутникъ неизмѣнный\n     На полѣ радостей земныхъ!\nРозалія, мой другъ, хранитель несравненный!\nКогда я отдохну въ объятіяхъ твоихъ? . •.\nСъ тобою горестей душа моя незнаетъ,\nИ сердцу скорбному не измѣнитъ покой!\nНадежда мрачный путь звѣздою озаряетъ,\n     И я мирюсь съ враждебною судьбой! . . •\nТеперь, за дальними, свирѣпыми морями\n  Твой сладкій гласъ не оживитъ меня!\nВзойдетъ заря надъ злачными холмами,\n  Появится въ лучахъ свѣтило дня —\n  Напрасно! все кругомъ покрыто мглою.\n  Неслышится мнѣ сладкій ігівой привѣтъ.\n  Всѣ радости, надежды всѣ съ тобою —\n     И опустѣлъ безъ милой свѣтъ!\nПодруга милая, скажи, что край прелестный,\n   Что мирныя, тѣнисты я поля,\nЧто своенравныя судьбы привѣтъ мнѣ лестный,\n     Когда съ тобой въ разлукѣ я.\n     Но другъ мои! горесть отл етаетъ\n                     243\n\n    На быстрыхъ времени крылахъ,\n    И радость сердце посѣщ аетъ. . . .\n    Моя надежда — въ небесахъ!. . .\n  Когдажъ опять смягченными судьбами\n  Я въ радости къ подругѣ понесусь,\nКоснусь волшебныхъ струнъ волшебными пер\n                                       стами\n  И, съ рѣзвою мечтою примирюсь.\n\n                             А, Б   —   фЪ.\n\n\nТекст распознан достаточно хорошо, есть мелкие ошибки, но их можно исправить (о чем речь пойдет в следующем уроке). Если необходимо сохранить извлеченный из pdf текст для дальнейшей работы, это делается так:\n\nwriteLines(text1, con = \"../ocr/rosalia.txt\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Распознавание изображений</span>"
    ]
  },
  {
    "objectID": "03_ocr.html#распознавание",
    "href": "03_ocr.html#распознавание",
    "title": "3  Распознавание изображений",
    "section": "3.5 Распознавание",
    "text": "3.5 Распознавание\nЕсли текст не распознан (притворимся, что так и есть), то можно попробовать распознать при помощи tesseract. Однако есть нюанс: tesseract не знает дореформенного русского. Это значит, что все яти (ѣ), еры (ъ), фита (Ѳ) и десятеричное и (і) превратятся во что-то другое. А еще трудности бывают с буквой “т”, т.к. в XIX в. ее печатали по-другому.\nПроверим. Но прежде всего, надо скачать модель для русского языка. Это делается один раз. Кстати, тессеракт способен “читать” тексты на нескольких языках, для этого передаем значение аргументу language так: “rus+deu”.\n\n# tesseract_download(\"rus\")\ntext2 &lt;- pdf_ocr_text(\"../ocr/НЗ1821_6_6[50-51].pdf\", language = \"rus\")\n\nConverting page 1 to НЗ1821_6_6[50-51]_1.png... done!\nConverting page 2 to НЗ1821_6_6[50-51]_2.png... done!\n\ncat(text2)\n\n999939993993999999339993399999939939 9039303939\nРАЗЛУКА.\n(Элегтя.)\n————-\nРозамя, мой спушникъь неизмённый\nНа полЪ радосшей земныхь!\nРозал!я, мой другь, хранишель несравненный!\nКогда я ошдохну въ объяпияхь швоихъ?...\nСъ шобою горестей душа моя незнаеть,\nИ сердцу скорбному не измЪнить покой!\nНадежда мрачный пушь звЪздою озаряепть,\nИ я мирюсь съ враждебною судьбой!...\n’Геперь, за дальними, свиофпыми морями\nТвой сладк!й гласъ не оживишьъ меня!\nВзойдеть заря надъ злачными холмами,\nПоявишся въ лучахъ свЪшило дня —\nНапрасно! все кругомъ покрыпю мглою.\nНеслышишся мнЪ сладюй тивой привЪфить,\nВсЪ5 радосши, надежды всЪ съ шобою —\nИ опусш$ль безъ милой свЪзить’\nПодруга милая, скажи, чшо край прелесшный,\nЧпо мирвыя, тифвисптыя поля,\nЧтпо своенравныя судьбы привЪтьъ мн лесшный,\nКогда съ шобой въ разлук я.\nНо другь мой! горесмь ошленаепть\n 245\nНа бысшрыхь времени крылахь,\nИ радосшь сердце посфщаеть....\nМоя надежда — въ небесахь!...\nКогдажъ опяшь смягченными судьбами\nЯ въ радосши къ подругЪ понесусь,\nКоснусь волшебныхь сшрунь волшебными пер-\nсшами\nИ, сь рфзвою мечтшою примирюсь.\nЯ, Б — $5.\n\n\nЧто в таких случаях делать?\n\nПервое: проверить, нет ли обученных моделей, которые справятся с вашей задачей. Я попробовала, например, модель для распознавания дореформенной орфографии с Hugging Face, но результат оказался очень печальным, я даже не буду его показывать. Это может быть связано с тем, что шрифт в нашем журнале отличается от тех, на которых учили модель.\nОбученные модели можно также поискать в Транскрибусе (например, здесь и здесь). Чтобы воспользоваться готовыми приложениями для распознавания шрифта, pdf надо преобразовать в картинку. Попробуйте.\n\n\npdf_convert(\"../ocr/НЗ1821_6_6[50-51].pdf\", \n            format = \"png\", \n            dpi = 300,\n            pages = NULL,  # все страницы, или c(1,3,5) для конкретных\n            filenames = NULL)\n\nРезультат неплохой, и для небольших проектов подойдет. Но у Транскрибуса есть ряд ограничений: модели нельзя использовать локально, расширенный функционал платный, и др.\n\nTranskribus — платформа для оцифровки и распознавания текста на основе технологии HTR (Handwritten Text Recognition), которая позволяет обучать специальные модули (англ. models) распознавания текста. Обученные модули способны распознавать рукописные, машинописные и печатные документы на самых разных языках, в частности, на классическом сирийском — одном из главных языков восточного христианства. (Источник)\n\n\nНаконец, можно дообучить уже существующую модель tesseract, как показано вот в этом примере.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Распознавание изображений</span>"
    ]
  },
  {
    "objectID": "03_ocr.html#файн-тюнинг",
    "href": "03_ocr.html#файн-тюнинг",
    "title": "3  Распознавание изображений",
    "section": "3.6 Файн-тюнинг",
    "text": "3.6 Файн-тюнинг\nНачиная с версии 4, Tesseract использует нейронную сеть для распознавания текста, что позволяет дообучать модель для конкретных задач.\nДля дообучения необходимы эталонные данные — фрагменты изображений с соответствующим им текстом.\n\n3.6.1 Подготовка обучающих данных\nШаг 1: Подготовка изображений\nСоздайте папку с именем {язык}-ground-truth/ (например, orus-ground-truth/) и поместите туда скриншоты текста. Названия файлов могут быть любыми.\nВ моем случае – это все пять скриншотов, лучше сделать несколько десятков. Выглядят они так:\n  NB: Более продвинутый подход к нарезке изображений см. здесь. Разрезать изображение на отдельные слова можно и в R – пример мы рассмотрим на занятии.\n\nШаг 2: Использование пакета tesseractgt\nТеперь для каждого изображения добавим текст (файлы в формате .gt.txt). Для ускорения процесса создания эталонных файлов можно использовать специальный пакет:\n\n# install.packages(\"remotes\")\nremotes::install_github(\"arcruz0/tesseractgt\")\n\nДля создание таких файлов используем базовую модель.\n\nlibrary(tesseractgt)\ncreate_gt_txt(\n  folder = \"../ocr/orus-ground-truth\",\n  extension = \"png\", \n  engine = tesseract::tesseract(language = \"rus\")\n)\n\nУбедитесь, что файлы появились в директории.\nШаг 3: Корректировка текстовых файлов\nИсправьте автоматически созданные файлы .gt.txt вручную:\n\ncorrect_gt_txt() \n\n\nЕсли не видно папки с изображениями, смените рабочую директорию.\n\n\n3.6.2 Процесс дообучения\n1. Клонируйте репозиторий tesstrain:\ngit clone https://github.com/tesseract-ocr/tesstrain.git\ncd tesstrain\nmake tesseract-langdata\n2. Переместите папку с данными:\nmv ~/location/alg-ground-truth data\n3. Запуск дообучения\nmake training MODEL_NAME=alg START_MODEL=eng FINETUNE_TYPE=Impact\nНа этом этапе у меня возникли сложности из-за того, что не был установлен make, также пришлось добавить аргумент LANG_TYPE.\nbrew install make # для Mac\n\ngmake training MODEL_NAME=orus START_MODEL=rus FINETUNE_TYPE=Impact LANG_TYPE=Both\nДообучение занимает несколько минут.\n\n\n3.6.3 Установка модели\nНайдите системную папку Tesseract:\n\ntesseract::tesseract_info()$datapath\n\n[1] \"/Users/olga/Library/Application Support/tesseract5/tessdata/\"\n\n\nСкопируйте сюда новую модель orus.traindata.\nПроверьте доступные модели:\n\ntesseract::tesseract_info()$available\n\n[1] \"deu\"  \"eng\"  \"grc\"  \"lat\"  \"orus\" \"osd\"  \"rus\"  \"snum\"\n\n\nПосле дообучения можно использовать новую модель:\n\ntext3 &lt;- pdf_ocr_text(\"../ocr/НЗ1821_6_6[50-51].pdf\", language = \"orus\")\n\nConverting page 1 to НЗ1821_6_6[50-51]_1.png... done!\nConverting page 2 to НЗ1821_6_6[50-51]_2.png... done!\n\ncat(text3)\n\nптт395$900990300&gt;9000093000ОВ9200080 900306080\nРАЗЛУК @ЧД,.\n(Эляегтля.)\n——-————\nРозамя, мой спутникъ неизмБнный\nНа пол& радостей земныхъ!\nРозамя, мой другъ, хранишель несравненный!\nКогда я отдохну въ объяпияхь тшвоихъ?...\nСъ тобою горестей душа моя незнаетъ,\nИ сердцу скорбному не измЪнить покой!\nНадежда мрачный путь звБздою озаряеть,\nИ я мирюсь съ враждебною судьбой!...\nТеперь, за дальними, свиръпыми морями\nТвой сладктй глась не оживишьъ меня!\nВзойдеть заря надь злачными холмами,\nПоявится въ лучакъь свЪытило дня —\nНапрасно! ксе кругомъ покрыто мглою.\nНеслышится мнЪ сладкй тшвой привЪтьъ,\nВсЪ радости, надежды всЪ сь тобою —\nИ опустль безъ милой свЪътъ!\nПодруга милая, скажи, что край прелестный,\nЧто мирныя, тФнистыя поля,\nЧто своенравныя судьбы привЪтъ мнЪ лестный,\nКогда сь тобой въ разлукЪ я.\nНо другь мой! горесть отлетаетьъ\n 242\nНа быстрыхъ времени крылахьъ,\nИ радость сердце посвбщаеть...,\nМоя надежда — въ небесахь!...\nКогдажь опять смятченными судьбами\nЯ въ радости къ подругЪ понесусь,\nКоснусь волшебныхъь струнь волшебными пер-\nстами\nИ, сь рБзвою мечтою примирюсь.\nА., Б — фё.\n\n\nТаким образом, дообучение Tesseract позволяет улучшить качество распознавания специализированных текстов; для лучшего результата используйте больше обучающих данных (чем больше, тем лучше). Пакет tesseractgt существенно упрощает процесс подготовки обучающих данных.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Распознавание изображений</span>"
    ]
  },
  {
    "objectID": "04_regex.html",
    "href": "04_regex.html",
    "title": "4  Нормализация. Регулярные выражение",
    "section": "",
    "text": "https://github.com/titoBouzout/Dictionaries",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Нормализация. Регулярные выражение</span>"
    ]
  },
  {
    "objectID": "05_xml.html",
    "href": "05_xml.html",
    "title": "5  Основы работы с XML",
    "section": "",
    "text": "5.1 Что такое XML\nXML (от англ. eXtensible Markup Language) — расширяемый язык разметки. Слово “расширяемый” означает, что список тегов не зафиксирован раз и навсегда: пользователи могут вводить свои собственные теги и создавать так называемые настраиваемые языки разметки (Холзнер 2004, 29). Один из таких настраиваемых языков – это TEI (Text Encoding Initiative), о котором будет сказано дальше.\nНазначение языков разметки заключается в описании структурированных документов. Структура документа представляется в виде набора вложенных в друг друга элементов (дерева XML). У элементов есть открывающие и закрывающие теги.\nВсе составляющие части документа обобщаются в пролог и корневой элемент. Корневой элемент — обязательная часть документа, в которую вложены все остальные элементы. Пролог может включать объявления, инструкции обработки, комментарии.\nВ правильно сформированном XML открывающий и закрывающий тег вложенного элемента всегда находятся внутри одного родительского элемента.\nСоздадим простой XML из строки. Сначала идет инструкция по обработке XML (со знаком вопроса), за ней следует объявление типа документа (с восклицательным знаком) и открывающий тег корневого элемента. В этот корневой элемент вложены все остальные элементы.\nstring_xml &lt;- '&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;!DOCTYPE recipe&gt;\n&lt;recipe name=\"хлеб\" preptime=\"5min\" cooktime=\"180min\"&gt;\n   &lt;title&gt;\n      Простой хлеб\n   &lt;/title&gt;\n   &lt;composition&gt;\n      &lt;ingredient amount=\"3\" unit=\"стакан\"&gt;Мука&lt;/ingredient&gt;\n      &lt;ingredient amount=\"0.25\" unit=\"грамм\"&gt;Дрожжи&lt;/ingredient&gt;\n      &lt;ingredient amount=\"1.5\" unit=\"стакан\"&gt;Тёплая вода&lt;/ingredient&gt;\n   &lt;/composition&gt;\n   &lt;instructions&gt;\n     &lt;step&gt;\n        Смешать все ингредиенты и тщательно замесить. \n     &lt;/step&gt;\n     &lt;step&gt;\n        Закрыть тканью и оставить на один час в тёплом помещении. \n     &lt;/step&gt;\n     &lt;step&gt;\n        Замесить ещё раз, положить на противень и поставить в духовку.\n     &lt;/step&gt;\n   &lt;/instructions&gt;\n&lt;/recipe&gt;'",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Основы работы с XML</span>"
    ]
  },
  {
    "objectID": "05_xml.html#что-такое-xml",
    "href": "05_xml.html#что-такое-xml",
    "title": "5  Основы работы с XML",
    "section": "",
    "text": "5.1.1 Библиотека XML\nДля работы с xml понадобится установить одноименную библиотеку. Функция xmlTreeParse() создаст R-структуру, представляющую дерево XML.\n\nlibrary(XML)\ndoc &lt;- xmlTreeParse(string_xml)\nclass(doc)\n\n[1] \"XMLDocument\"         \"XMLAbstractDocument\"\n\n\nФункция xmlRoot() позволяет извлечь корневой элемент вместе со всеми детьми.\n\nrootnode &lt;- xmlRoot(doc)\nrootnode\n\n&lt;recipe name=\"хлеб\" preptime=\"5min\" cooktime=\"180min\"&gt;\n &lt;title&gt;Простой хлеб&lt;/title&gt;\n &lt;composition&gt;\n  &lt;ingredient amount=\"3\" unit=\"стакан\"&gt;Мука&lt;/ingredient&gt;\n  &lt;ingredient amount=\"0.25\" unit=\"грамм\"&gt;Дрожжи&lt;/ingredient&gt;\n  &lt;ingredient amount=\"1.5\" unit=\"стакан\"&gt;Тёплая вода&lt;/ingredient&gt;\n &lt;/composition&gt;\n &lt;instructions&gt;\n  &lt;step&gt;Смешать все ингредиенты и тщательно замесить.&lt;/step&gt;\n  &lt;step&gt;Закрыть тканью и оставить на один час в тёплом помещении.&lt;/step&gt;\n  &lt;step&gt;Замесить ещё раз, положить на противень и поставить в духовку.&lt;/step&gt;\n &lt;/instructions&gt;\n&lt;/recipe&gt;\n\n\nЕсли документ большой, бывает удобнее не распечатывать все дерево, а вывести имена дочерних элементов.\n\nnames(xmlChildren(rootnode))\n\n[1] \"title\"        \"composition\"  \"instructions\"\n\n\nРазмер узла – это число вложенных в него “детей”. Его можно узнать, применив к узлу функцию xmlSize() – или посчитав число “детей”.\n\nxmlSize(rootnode) == length(xmlChildren(rootnode))\n\n[1] TRUE\n\n\n\n\n5.1.2 Выбор элементов\nРаботать с xml можно как с обычным списком, то есть индексировать узлы по имени или по номеру элемента при помощи квадратных скобок. Так мы достаем узел по имени:\n\nrootnode[[\"composition\"]]\n\n&lt;composition&gt;\n &lt;ingredient amount=\"3\" unit=\"стакан\"&gt;Мука&lt;/ingredient&gt;\n &lt;ingredient amount=\"0.25\" unit=\"грамм\"&gt;Дрожжи&lt;/ingredient&gt;\n &lt;ingredient amount=\"1.5\" unit=\"стакан\"&gt;Тёплая вода&lt;/ingredient&gt;\n&lt;/composition&gt;\n\n\nА так – по индексу:\n\nrootnode[[2]]\n\n&lt;composition&gt;\n &lt;ingredient amount=\"3\" unit=\"стакан\"&gt;Мука&lt;/ingredient&gt;\n &lt;ingredient amount=\"0.25\" unit=\"грамм\"&gt;Дрожжи&lt;/ingredient&gt;\n &lt;ingredient amount=\"1.5\" unit=\"стакан\"&gt;Тёплая вода&lt;/ingredient&gt;\n&lt;/composition&gt;\n\n\nКак и с обычными списками, мы можем использовать последовательности квадратных скобок:\n\ningr_node &lt;- rootnode[[2]][[\"ingredient\"]]\ningr_node\n\n&lt;ingredient amount=\"3\" unit=\"стакан\"&gt;Мука&lt;/ingredient&gt;\n\n\n\n\n5.1.3 Значения узлов и атрибутов\nНо обычно нам нужен не элемент как таковой, а его содержание (значение). Чтобы добраться до него, используем функцию xmlValue():\n\nxmlValue(ingr_node)\n\n[1] \"Мука\"\n\n\nМожно уточнить атрибуты узла при помощи xmlAttrs():\n\nxmlAttrs(ingr_node)\n\n  amount     unit \n     \"3\" \"стакан\" \n\n\nЧтобы извлечь значение атрибута, используем функцию xmlGetAttr(). Первым аргументом функции передаем xml-узел, вторым – имя атрибута.\n\nxmlGetAttr(ingr_node, \"unit\")\n\n[1] \"стакан\"\n\n\n\n\n5.1.4 Обход дерева узлов\nКак насчет того, чтобы применить функцию к набору узлов – например, ко всем инредиентам? Вспоминаем функции для работы со списками – sapply() из базового R или map() из пакета purrr:\n\ningr_nodes &lt;- xmlChildren(rootnode[[2]])\n\nsapply(ingr_nodes, xmlValue)\n\n   ingredient    ingredient    ingredient \n       \"Мука\"      \"Дрожжи\" \"Тёплая вода\" \n\n\n\nsapply(ingr_nodes, xmlGetAttr, \"unit\")\n\ningredient ingredient ingredient \n  \"стакан\"    \"грамм\"   \"стакан\" \n\n\n\n\n5.1.5 Синтаксис XPath\nДобраться до узлов определенного уровня можно также при помощи синтаксиса XPath. XPath – это язык запросов к элементам XML-документа. С его помощью можно описать “путь” до нужного узла: абсолютный (начиная с корневого элемента) или относительный. В пакете XML синтаксис XPath поддерживает функция getNodeSet().\n\n# абсолютный путь\ningr_nodes &lt;- getNodeSet(rootnode, \"/recipe//composition//ingredient\")\n\ningr_nodes\n\n[[1]]\n&lt;ingredient amount=\"3\" unit=\"стакан\"&gt;Мука&lt;/ingredient&gt;\n\n[[2]]\n&lt;ingredient amount=\"0.25\" unit=\"грамм\"&gt;Дрожжи&lt;/ingredient&gt;\n\n[[3]]\n&lt;ingredient amount=\"1.5\" unit=\"стакан\"&gt;Тёплая вода&lt;/ingredient&gt;\n\n\n\n# относительный путь\ningr_nodes &lt;- getNodeSet(rootnode, \"//composition//ingredient\")\n\ningr_nodes\n\n[[1]]\n&lt;ingredient amount=\"3\" unit=\"стакан\"&gt;Мука&lt;/ingredient&gt;\n\n[[2]]\n&lt;ingredient amount=\"0.25\" unit=\"грамм\"&gt;Дрожжи&lt;/ingredient&gt;\n\n[[3]]\n&lt;ingredient amount=\"1.5\" unit=\"стакан\"&gt;Тёплая вода&lt;/ingredient&gt;\n\n\n\n\n\n\n\n\n\nНа заметку\n\n\n\nВ большинстве случаев функция getNodeSet() требует задать пространство имен (namespace), но в нашем случае оно не определено, поэтому пока передаем только дерево и путь до узла. С пространством имен встретимся чуть позже!\n\n\n\nСинтаксис XPath позволяет отбирать узлы с определенными атрибутами. Допустим, нам нужны только те узлы, где значение атрибута unit = “стакан”:\n\ngetNodeSet(rootnode, \"//composition//ingredient[@unit='стакан']\")\n\n[[1]]\n&lt;ingredient amount=\"3\" unit=\"стакан\"&gt;Мука&lt;/ingredient&gt;\n\n[[2]]\n&lt;ingredient amount=\"1.5\" unit=\"стакан\"&gt;Тёплая вода&lt;/ingredient&gt;\n\n\n\n\n5.1.6 От дерева к таблице\nПри работе с xml в большинстве случаев наша задача – извлечь значения определеннных узлов или их атрибутов и сохранить их в прямоугольном формате. Один из способов выглядит так.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ntibble(title = xmlValue(rootnode[[\"title\"]]), \n       ingredients = map_chr(xmlChildren(rootnode[[\"composition\"]]), xmlValue),\n       unit = map_chr(xmlChildren(rootnode[[\"composition\"]]), xmlGetAttr, \"unit\"),\n       amount = map_chr(xmlChildren(rootnode[[\"composition\"]]), xmlGetAttr, \"amount\"))\n\n\n  \n\n\n\n\n\n5.1.7 Разметка TEI\nБольшая часть размеченных литературных корпусов хранится именно в формате XML. Это очень удобно, и вот почему: документы в формате XML, как и документы в формате HTML, содержат данные, заключенные в теги, но если в формате HTML теги определяют оформление данных, то в формате XML теги нередко определяют структуру и смысл данных. С их помощью мы можем достать из документа именно то, что нам интересно: определенную главу, речи конкретных персонажей, слова на иностранных языках и т.п.\nДобавлять и удалять разметку может любой пользователь в редакторе XML кода или даже в простом текстовом редакторе. При этом в качестве универсального языка разметки в гуманитарных дисциплинах используется язык TEI (Скоринкин 2016). Корневой элемент в документах TEI называется TEI, внутри него располагается элемент teiHeader с метаинформацией о документе и элемент text. Последний содержит текст документа с элементами, определяющими его структурное членение.\n&lt;TEI&gt;\n  &lt;teiHeader&gt;&lt;/teiHeader&gt;\n  &lt;text&gt;&lt;/text&gt;\n&lt;/TEI&gt;\nПример оформления документа можно посмотреть по ссылке.\nУ teiHeader есть четыре главных дочерних элемента:\n\nfileDesc (описание документа c библиографической информацией)\nencodingDesc (описание способа кодирование первоисточника)\nprofileDesc (“досье” на текст, например отправитель и получатель для писем, жанр, используемые языки, обстоятельства создания, место написания и т.п.)\nrevisionDesc (история изменений документа).\n\nВ самом тексте язык TEI дает возможность представлять разные варианты (авторские, редакторские, корректорские и др.) Основным средством параллельного представления является элемент choice. Например, в тексте Лукреция вы можете увидеть такое:\nsic calor atque &lt;choice&gt;&lt;reg&gt;aer&lt;/reg&gt;&lt;orig&gt;aër&lt;/orig&gt;&lt;/choice&gt; et venti caeca potestas\nЗдесь reg указывает на нормализованное написание, а orig – на оригинальное.\n\n\n\n\nСкоринкин, Даниил. 2016. «Электронное представление текста с помощью стандарта разметки TEI», 90–108.\n\n\nХолзнер, Стивен. 2004. Энциклопедия XML. Питер.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Основы работы с XML</span>"
    ]
  },
  {
    "objectID": "07_llm.html",
    "href": "07_llm.html",
    "title": "7  Добавление разметки с LLM",
    "section": "",
    "text": "7.1 Модели\nOpenRouter — это агрегатор LLM‑моделей (OpenAI, Anthropic, Meta, Mistral и др.) с единым API. Можно выбрать бесплатные модели (с лимитами) и вызывать их из R/RStudio.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Добавление разметки с LLM</span>"
    ]
  },
  {
    "objectID": "07_llm.html#модели",
    "href": "07_llm.html#модели",
    "title": "7  Добавление разметки с LLM",
    "section": "",
    "text": "Большая часть моделей требует денег за API =(\nЕсть бесплатный пробный период у Gemini, но из России воспользоваться им не получится без VPN =/\nЕсть полностью бесплатные локальные модели. Они тяжелые и не всегда умные. =\n\nКопипаста через телеграм-чат - не наш метод.\nРазные хитрости.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Добавление разметки с LLM</span>"
    ]
  },
  {
    "objectID": "07_llm.html#получение-ключа-api",
    "href": "07_llm.html#получение-ключа-api",
    "title": "7  Добавление разметки с LLM",
    "section": "7.2 Получение ключа API",
    "text": "7.2 Получение ключа API\nAPI (Application programming interface) это набор правил, по которым приложения или части программы общаются друг с другом.\nИдем на сайт https://openrouter.ai/, регистрируемся, получаем ключ (дайте ему осмысленное название), копируем и сразу сохраняем.\n\nSys.setenv(OPENROUTER_API_KEY = \"ваш_ключ_api\")\n\nИли отредактируйте файл .Renviron в домашней директории:\n\nusethis::edit_r_environ()\n\nПосле чего добавьте строку в файл OPENROUTER_API_KEY=ваш_ключ_api и перезапустите сессию.\nПроверить:\n\nSys.getenv(\"OPENROUTER_API_KEY\")",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Добавление разметки с LLM</span>"
    ]
  },
  {
    "objectID": "07_llm.html#начало-работы",
    "href": "07_llm.html#начало-работы",
    "title": "7  Добавление разметки с LLM",
    "section": "7.3 Начало работы",
    "text": "7.3 Начало работы\n\nlibrary(ellmer)\n\n\npackageVersion(\"ellmer\")\n\n[1] '0.3.0'\n\n\n\nchat &lt;- chat_openrouter(\n  system_prompt = \"You always reply in Latin\",\n  api_key = Sys.getenv(\"OPENROUTER_API_KEY\"),\n  model = NULL\n)\n\nUsing model = \"gpt-4o\".\n\n\n\nchat$chat(\"На сколько частей разделена Галлия?\")\n# Error in `req_perform_connection()`:\n# ! HTTP 402 Payment Required.\n# ℹ Insufficient credits. Add more using\n#   https://openrouter.ai/settings/credits\n# Run `rlang::last_trace()` to see where the error occurred.\n\nСписок бесплатных моделей можно уточнить здесь https://openrouter.ai/models\n\nchat &lt;- chat_openrouter(\n  system_prompt = \"You always reply in Latin\",\n  api_key = Sys.getenv(\"OPENROUTER_API_KEY\"),\n  model = \"openai/gpt-oss-20b:free\"\n)\n\nchat$chat(\"На сколько частей разделена Галлия?\")\n# Gallia in tres partes dividitur: Gallia Narbonensis, Gallia \n# Lugdunensis, et Gallia Belgica.\n\nЕсли все получилось, идем дальше.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Добавление разметки с LLM</span>"
    ]
  },
  {
    "objectID": "07_llm.html#создание-промпта",
    "href": "07_llm.html#создание-промпта",
    "title": "7  Добавление разметки с LLM",
    "section": "7.4 Создание промпта",
    "text": "7.4 Создание промпта\n(Тут будет подробнее про стратегии написания промптов)\n\nsystem_prompt &lt;- \"You are an experienced TEI encoder specializing in geographic markup. Your task is to identify and tag all place references in the text using proper TEI &lt;place&gt; elements.\n\nINSTRUCTIONS:\n1. Identify ALL geographic references including:\n   - Cities, towns, villages (e.g., Paris, London)\n   - Countries, regions, states (e.g., France, Tuscany, California)\n   - Geographic features (e.g., Rhine River, Alps, Mediterranean Sea)\n   - Buildings and landmarks (e.g., Eiffel Tower, Westminster Abbey)\n   - Fictional places (e.g., Hogwarts, Middle-earth)\n\n2. Use this tagging format:\n   - Simple places: &lt;place&gt;Paris&lt;/place&gt;\n   - With type attribute: &lt;place type='city'&gt;Paris&lt;/place&gt;\n   - With key/ID: &lt;place key='paris_france'&gt;Paris&lt;/place&gt;\n\n3. TYPES to use:\n   - settlement (cities, towns, villages)\n   - country \n   - region\n   - building\n   - landmark\n   - waterway\n   - mountain\n   - fictional\n\n4. RULES:\n   - Tag the complete place name as it appears\n   - Don't tag directional references like 'north', 'eastern' unless part of proper name\n   - Include adjectives when part of the place name (e.g., 'New York', 'Great Britain')\n   - For ambiguous cases, prioritize the most specific geographic reading\n\n5. Return the complete text with all place references properly tagged.\"",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Добавление разметки с LLM</span>"
    ]
  },
  {
    "objectID": "07_llm.html#добавление-разметки",
    "href": "07_llm.html#добавление-разметки",
    "title": "7  Добавление разметки с LLM",
    "section": "7.5 Добавление разметки",
    "text": "7.5 Добавление разметки\n\nuser_prompt &lt;- \"Может быть, никто из живущих в Москве не знает так хорошо окрестностей города сего, как я, потому что никто чаще моего не бывает в поле, никто более моего не бродит пешком, без плана, без цели — куда глаза глядят — по лугам и рощам, по холмам и равнинам. Всякое лето нахожу новые приятные места или в старых новые красоты.\n\nНо всего приятнее для меня то место, на котором возвышаются мрачные, готические башни Си...нова монастыря. Стоя на сей горе, видишь на правой стороне почти всю Москву, сию ужасную громаду домов и церквей, которая представляется глазам в образе величественного амфитеатра: великолепная картина, особливо когда светит на нее солнце, когда вечерние лучи его пылают на бесчисленных златых куполах, на бесчисленных крестах, к небу возносящихся! Внизу расстилаются тучные, густо-зеленые цветущие луга, а за ними, по желтым пескам, течет светлая река, волнуемая легкими веслами рыбачьих лодок или шумящая под рулем грузных стругов, которые плывут от плодоноснейших стран Российской империи и наделяют алчную Москву хлебом. На другой стороне реки видна дубовая роща, подле которой пасутся многочисленные стада; там молодые пастухи, сидя под тению дерев, поют простые, унылые песни и сокращают тем летние дни, столь для них единообразные. Подалее, в густой зелени древних вязов, блистает златоглавый Данилов монастырь; еще далее, почти на краю горизонта, синеются Воробьевы горы. На левой же стороне видны обширные, хлебом покрытые поля, лесочки, три или четыре деревеньки и вдали село Коломенское с высоким дворцом своим.\"\n\n\nchat &lt;- chat_openrouter(\n  system_prompt = system_prompt,\n  api_key = Sys.getenv(\"OPENROUTER_API_KEY\"),\n  model = \"openai/gpt-oss-20b:free\"\n)\n\nresponse &lt;- chat$chat(user_prompt)\n# Может быть, никто из живущих в &lt;place \n# type='settlement'&gt;Москву&lt;/place&gt; не знает так хорошо окрестностей \n# города сего, как я, потому что никто чаще моего не бывает в поле, \n# никто более моего не бродит пешком, без плана, без цели — куда \n# глаза глядят — по лугам и рощам, по холмам и равнинам. Всякое лето \n# нахожу новые приятные места или в старых новые красоты.\n# \n# Но всего приятнее для меня то место, на котором возвышаются \n# мрачные, готические башни &lt;place type='building'&gt;Си…нова \n# монастыря&lt;/place&gt;. Стоя на сей горе, видишь на правой стороне почти\n# всю &lt;place type='settlement'&gt;Москва&lt;/place&gt;, сию ужасную громаду \n# домов и церквей, которая представляется глазам в образе \n# величественного амфитеатра: великолепная картина, особливо когда \n# светит на нее солнце, когда вечерние лучи его пылают на \n# бесчисленных златых куполах, на бесчисленных крестах, к небу \n# возносящихся! Внизу расстилаются тучные, густо-зеленые цветущие \n# луга, а за ними, по желтым пескам, течет светлая река, волнуемая \n# легкими веслами рыбачьих лодок или шумящая под рулем грузных \n# стругов, которые плывут от плодоноснейших стран &lt;place \n# type='region'&gt;Российской империи&lt;/place&gt; и наделяют алчную &lt;place \n# type='settlement'&gt;Москву&lt;/place&gt; хлебом. На другой стороне реки \n# видна дубовая роща, подле которой пасутся многочисленные стада; там\n# молодые пастухи, сидя под тенью дерев, поют простые, унылые песни и\n# сокращают тем летние дни, столь для них единообразные. Подалее, в \n# густой зелени древних вязов, блистает златоглавый &lt;place \n# type='building'&gt;Данилов монастырь&lt;/place&gt;; еще далее, почти на краю\n# горизонта, синеются &lt;place type='mountain'&gt;Воробьевы горы&lt;/place&gt;. \n# На левой же стороне видны обширные, хлебом покрытые поля, лесочки, \n# три или четыре деревеньки и вдали село &lt;place \n# type='settlement'&gt;Коломенское&lt;/place&gt; с высоким дворцом своим.\n\nНа первый взгляд, модель справилась неплохо. “Российскую империю” стоило тегировать как “страну”, а не “регион” (подобные случаи можно прописать в промпте).",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Добавление разметки с LLM</span>"
    ]
  },
  {
    "objectID": "07_llm.html#добавление-пролога",
    "href": "07_llm.html#добавление-пролога",
    "title": "7  Добавление разметки с LLM",
    "section": "7.6 Добавление пролога",
    "text": "7.6 Добавление пролога\n\nadd_tei_prologue &lt;- function(marked_text, \n                            title = \"Карамзин Н.М. Бедная Лиза\", \n                            author = \"Карамзин, Николай Михайлович\",\n                            date = \"1792\") {\n  \n  prologue &lt;- sprintf('&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;TEI xmlns=\"http://www.tei-c.org/ns/1.0\"&gt;\n  &lt;teiHeader&gt;\n    &lt;fileDesc&gt;\n      &lt;titleStmt&gt;\n        &lt;title&gt;%s&lt;/title&gt;\n        &lt;author&gt;%s&lt;/author&gt;\n      &lt;/titleStmt&gt;\n      &lt;publicationStmt&gt;\n        &lt;p&gt;Цифровое издание для исследовательских целей&lt;/p&gt;\n      &lt;/publicationStmt&gt;\n      &lt;sourceDesc&gt;\n        &lt;p&gt;Оригинальный текст %s года&lt;/p&gt;\n      &lt;/sourceDesc&gt;\n    &lt;/fileDesc&gt;\n  &lt;/teiHeader&gt;\n  &lt;text&gt;\n    &lt;body&gt;\n      &lt;p&gt;%s&lt;/p&gt;\n    &lt;/body&gt;\n  &lt;/text&gt;\n&lt;/TEI&gt;', title, author, date, marked_text)\n  \n  return(prologue)\n}\n\nПрименяем к нашему тексту.\n\ntei_document &lt;- add_tei_prologue(response)\n\nСохраняем в файл.\n\nwriteLines(tei_document, \"bednaya_liza_fragment.xml\", useBytes = TRUE)\n\nПроверяем валидность XML.\n\nlibrary(xml2)\nxml_doc &lt;- read_xml(\"bednaya_liza_fragment.xml\")\nclass(xml_doc)\n\n[1] \"xml_document\" \"xml_node\"    \n\n\nПрежде чем масштабировать, проверим, нет ли галлюцинаций в оригинале (такое, увы, бывает).",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Добавление разметки с LLM</span>"
    ]
  },
  {
    "objectID": "07_llm.html#сравнение-с-исходником",
    "href": "07_llm.html#сравнение-с-исходником",
    "title": "7  Добавление разметки с LLM",
    "section": "7.7 Сравнение с исходником",
    "text": "7.7 Сравнение с исходником\nИзвлекаем текст из параграфа.\n\nns &lt;- c(tei = \"http://www.tei-c.org/ns/1.0\")\n\ntext_content &lt;- xml_doc |&gt; \n    xml_find_all(\".//tei:body//tei:p\", ns) |&gt; \n    xml_text() |&gt;\n    paste(collapse = \"nn\")\n\nВыводим результат.\n\ncat(text_content)\n\nМожет быть, никто из живущих в Москву не знает так хорошо окрестностей города сего, как я, потому что никто чаще моего не бывает в поле, никто более моего не бродит пешком, без плана, без цели — куда глаза глядят — по лугам и рощам, по холмам и равнинам. Всякое лето нахожу новые приятные места или в старых новые красоты.\n\nНо всего приятнее для меня то место, на котором возвышаются мрачные, готические башни Си…нова монастыря. Стоя на сей горе, видишь на правой стороне почти всю Москва, сию ужасную громаду домов и церквей, которая представляется глазам в образе величественного амфитеатра: великолепная картина, особливо когда светит на нее солнце, когда вечерние лучи его пылают на бесчисленных златых куполах, на бесчисленных крестах, к небу возносящихся! Внизу расстилаются тучные, густо-зеленые цветущие луга, а за ними, по желтым пескам, течет светлая река, волнуемая легкими веслами рыбачьих лодок или шумящая под рулем грузных стругов, которые плывут от плодоноснейших стран Российской империи и наделяют алчную Москву хлебом. На другой стороне реки видна дубовая роща, подле которой пасутся многочисленные стада; там молодые пастухи, сидя под тенью дерев, поют простые, унылые песни и сокращают тем летние дни, столь для них единообразные. Подалее, в густой зелени древних вязов, блистает златоглавый Данилов монастырь; еще далее, почти на краю горизонта, синеются Воробьевы горы. На левой же стороне видны обширные, хлебом покрытые поля, лесочки, три или четыре деревеньки и вдали село Коломенское с высоким дворцом своим.\n\n\nТеперь можно сравнивать.\n\nlibrary(diffobj)\n\ndiffChr(trimws(text), trimws(text_content), mode = \"sidebyside\")\n\n\nУпс. Машинка действительно кое-что поправила, и не в лучшую сторону.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Добавление разметки с LLM</span>"
    ]
  },
  {
    "objectID": "07_llm.html#метрики",
    "href": "07_llm.html#метрики",
    "title": "7  Добавление разметки с LLM",
    "section": "7.8 Метрики",
    "text": "7.8 Метрики\nhttps://digitalcommons.unl.edu/r-journal/415/\nИмеет смысл сравнить несколько моделей и выбрать лучшую.\n\nlibrary(stringdist)\nlibrary(dplyr)\n\n# Sample data\noriginal_text &lt;- \"The quick brown fox jumps over the lazy dog\"\nmodel_outputs &lt;- list(\n  model_A = \"The quikc brown fox jumps over the lazy dog\", # one typo\n  model_B = \"A brow fox jumped over  lazy dog\",  # the worst\n  model_C = \"The quick brown fox jumps over the lazy dog\" # exact match\n)\n\nСчитаем расстояние.\nLevenshtein distance - подсчитывает минимальное количество вставок, удалений и замен - Классическая метрика, широко используется\nOptimal String Alignment (OSA) - добавляет транспозиции смежных символов - Не удовлетворяет неравенству треугольника - Используется по умолчанию в stringdist\nDamerau-Levenshtein - полная версия с множественными транспозициями - Является настоящей метрикой (удовлетворяет всем свойствам)\n\ncompare_texts &lt;- function(original, outputs) {\n  results &lt;- data.frame(\n    model = names(outputs),\n    Levenshtein = sapply(outputs, function(x) stringdist(original, x, method = \"lv\")),\n    DamerauLevenshtein = sapply(outputs, function(x) stringdist(original, x, method = \"dl\")),\n    OptimalStringAlignment = sapply(outputs, function(x) stringdist(original, x, method = \"osa\"))\n    )\n  return(results)\n}\n\n# Compare all models\ncomparison_results &lt;- compare_texts(original_text, model_outputs)\nprint(comparison_results)\n\n          model Levenshtein DamerauLevenshtein OptimalStringAlignment\nmodel_A model_A           2                  1                      1\nmodel_B model_B          15                 15                     15\nmodel_C model_C           0                  0                      0\n\n\nВажно! Для корректно оценки необходимо вручную оценить теги.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Добавление разметки с LLM</span>"
    ]
  },
  {
    "objectID": "07_llm.html#как-улучшить-результат",
    "href": "07_llm.html#как-улучшить-результат",
    "title": "7  Добавление разметки с LLM",
    "section": "7.9 Как улучшить результат",
    "text": "7.9 Как улучшить результат\n\n7.9.1 Доработка промпта\nДобавьте четкие инструкции о сохранении исходного текста:\n\nsystem_prompt &lt;- \"You are an experienced TEI encoder specializing in geographic markup. \n\nCRITICAL: You must preserve the original text EXACTLY as provided. Do not correct spelling, grammar, or punctuation. Do not modernize language or fix any perceived errors.\n\nYour task is to identify and tag all place references using proper TEI &lt;place&gt; elements WITHOUT changing the original text in any way.\n\n[остальные инструкции...]\n\nIMPORTANT: Return the text with ONLY the place tags added. Everything else must remain identical to the input.\"\n\nАльтернативные модели\nПопробуйте разные модели - некоторые лучше следуют инструкциям:\n\nmodels_to_test &lt;- c(\n  \"anthropic/claude-3-haiku:beta\",\n  \"meta-llama/llama-3.1-8b-instruct:free\",\n  \"microsoft/wizardlm-2-8x22b\",\n  \"openai/gpt-oss-20b:free\"\n)\n\nТестируем на небольшом фрагменте.\n\nbest_model &lt;- test_models(models_to_test, sample_text)",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Добавление разметки с LLM</span>"
    ]
  },
  {
    "objectID": "08_share.html",
    "href": "08_share.html",
    "title": "8  Публикационная система Quarto",
    "section": "",
    "text": "8.1 О воспроизводимости\nПолученный в результате количественных исследований результат должен быть проверяем и воспроизводим. Это значит, что в большинстве случаев недостаточно просто рассказать, что вы проделали. Теоретически читатель должен иметь возможность проделать тот же путь, что и автор: воcпроизвести его результаты, но в обратном направлении.\nДля этого должны выполняться три основных требования:\nУже на этапе планирования исследования очень важно продумать, как вы будете его документировать. Важно помнить, что код пишется не только для машин, но и для людей, поэтому стоит документировать не только то, что вы делали, но и почему. R дает для этого множество возможностей, главная из которых – это Markdown.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Публикационная система Quarto</span>"
    ]
  },
  {
    "objectID": "08_share.html#о-воспроизводимости",
    "href": "08_share.html#о-воспроизводимости",
    "title": "8  Публикационная система Quarto",
    "section": "",
    "text": "На заметку\n\n\n\nВоспроизводимость (reproducibility) – это не то же, что повторяемость (replicability). Ученый, который повторяет исследование, проводит его заново на новых данных. Воспроизведение – гораздо более скромная задача, не требующая таких ресурсов, как повторение (Winter 2020, 47).\n\n\n\n\nдоступность данных и метаданных;\nдоступность компьютерного кода;\nдоступность программного обеспечения.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Публикационная система Quarto</span>"
    ]
  },
  {
    "objectID": "08_share.html#markdown",
    "href": "08_share.html#markdown",
    "title": "8  Публикационная система Quarto",
    "section": "8.2 Markdown",
    "text": "8.2 Markdown\nMarkdown – это облегчённый язык разметки. Он позволяет создавать документы разного формата – не только HTML (веб-страницы), но и PDF и Word. Markdown дает возможность создания полностью воспроизводимых документов, сочетающих код и поясняющий текст. Этот язык используется для создания сайтов, статей, книг, презентаций, отчетов, дашбордов и т.п. Этот курс написан с использованием Markdown.\nЧтобы начать работать с документами .rmd, нужен пакет rmarkdown; в RStudio он уже предустановлен. Создание нового документа .rmd происходит из меню.\nПо умолчанию документ .rmd снабжен шапкой yaml. Она не обязательна. Здесь содержатся данные об авторе, времени создания, формате, сведения о файле с библиографией и т.п.\n---\ntitle: \"Demo\"\nauthor: \"My name\"\ndate: \"2025-08-23\"\noutput: html_document\n---\nТакже в документе .rmd скорее всего будет простой текст и блоки кода. Чтобы “сшить” html (pdf, doc), достаточно нажать кнопку knit либо запустить в консоли код: rmarkdown::render(\"Demo.Rmd\"). После этого в рабочей директории появится новый файл (html, pdf, или doc), которым можно поделиться с коллегами, грантодателями или друзьями.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Публикационная система Quarto</span>"
    ]
  },
  {
    "objectID": "08_share.html#quarto",
    "href": "08_share.html#quarto",
    "title": "8  Публикационная система Quarto",
    "section": "8.3 Quarto",
    "text": "8.3 Quarto\nРаботать с маркдауном мы будем, используя издательскую систему Quarto с открытым исходным кодом. Она позволяет создавать и публиковать статьи, презентации, информационные панели, веб-сайты, блоги и книги в HTML, PDF, MS Word, ePub и других форматах. В общем, обычный Markdown тоже позволяет все это делать, но чуть сложнее. Quarto объединяет различные пакеты из экосистемы R Markdown воедино и значительно упрощает работу с ними. Подробнее см. практическое руководство “Quarto: The Definitive Guide”.\n\n\n\n\n\n\nЗадание\n\n\n\nСоздайте новый .qmd документ. Потренируйтесь запускать код и сшивать документ в .html, .pdf, .docx.\n\n\nДля .pdf может понадобиться установка LaTeX.\n\n# install.packages(\"tinytex\")\ntinytex::install_tinytex()\n# to uninstall TinyTeX, run\n# tinytex::uninstall_tinytex()\n\nМожно указать сразу несколько форматов для файла, как показано здесь, и “сшить” их одновременно:\n\nquarto::quarto_render(\n  \"untitled.qmd\", \n  output_format = c(\"pdf\", \"html\", \"docx\")\n)",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Публикационная система Quarto</span>"
    ]
  },
  {
    "objectID": "08_share.html#шапка-yaml",
    "href": "08_share.html#шапка-yaml",
    "title": "8  Публикационная система Quarto",
    "section": "8.4 Шапка YAML",
    "text": "8.4 Шапка YAML\nОсновные параметры документа хранятся в YAML-шапке. К ним относятся format, title, subtitle, date, date-format, author, abstract, lang, toc, number-sections и другие.\nПопробуйте изменить шапку своего .qmd-документа и заново его сшить. Сравните с предыдущей версией.\n---\ntitle: \"Заголовок\"\nsubtitle: \"Подзаголовок\"\nformat: html\nauthor: locusclassicus\ndate: today\ndate-format: D.MM.YYYY\nabstract: Значенье бублика нам непонятно.\nlang: ru\ntoc: true\nnumber-sections: true\n---\n\nПоле execute позволяет задать параметры всех фрагментов кода в документе, например:\n---\nexecute:\n  echo: false\n  fig-width: 9\n---\n  \nНо для отдельных кусков кода эти настройки можно поменять:\n```\n#| echo: true\n\nsqrt(16)\n```\nПараметр df-print позволяет выбрать один из возможных способов отображения датафреймов:\n\ndefault — стандартный, как в консоли;\ntibble — стандартный, как в консоли, но в формате tibble;\nkable — минималистичный вариант, подходит для всех видов документов;\npaged — интерактивная таблица, подходит для html страниц.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Публикационная система Quarto</span>"
    ]
  },
  {
    "objectID": "08_share.html#синтаксис-markdown",
    "href": "08_share.html#синтаксис-markdown",
    "title": "8  Публикационная система Quarto",
    "section": "8.5 Синтаксис Markdown",
    "text": "8.5 Синтаксис Markdown\n\n8.5.1 Заголовки\nЗаголовки разного уровня задаются при помощи решетки:\n# Заголовок первого уровня\n## Заголовок второго уровня\n### Заголовок третьего уровня\n#### Заголовок четвёртого уровня\nПример заголовка третьего уровня:\n\n\n8.5.2 Форматирование\n*курсив*  \n_курсив_\n\n**полужирный**  \n__полужирный__\n\n***полужирный курсив***  \n___полужирный курсив___\n\n~~зачеркнутый~~\n\n&lt;mark&gt;выделение&lt;/mark&gt;\nПример:\nкурсив\nполужирный\nуж и не знаю как выделить\nзачеркнутый\nвыделение\n\n\n8.5.3 Списки\nНумерованный список\n1. Пункт первый\n2. Пункт второй\n3. Пункт третий\nПример:\n\nПункт первый\nПункт второй\nПункт третий\n\nМаркированный список\n- Пункт первый\n- Пункт второй\n- Пункт третий\nПример:\n\nПункт первый\nПункт второй\nПункт третий\n\nТакже Markdown позволяет делать вложенные списки:\n1. Пункт первый\n    - Подпункт первый\n    - Подпункт второй\n2. Пункт второй\nПример:\n\nПункт первый\n\nПодпункт первый\nПодпункт второй\n\nПункт второй\n\nСамое удобное, что элементы списка не обязательно нумеровать:\n(@) Пункт первый.\n(@) Пункт не знаю какой.\n\nПункт первый.\nПункт не знаю какой.\n\n\n\n8.5.4 Ссылки\n[Текст ссылки](http://antibarbari.ru/)\nПример:\nТекст ссылки\n\n\n8.5.5 Изображения\n![Текст описания](https://upload.wikimedia.org/wikipedia/commons/thumb/3/30/Holbein-erasmus.jpg/548px-Holbein-erasmus.jpg)\nПример:\n\n\n\nМоя картинка\n\n\nДва нюанса:\n\nможно давать ссылки на локальные файлы (то есть такие файлы, которые хранятся на компьютере), но имейте в виду, что такой код не будет работать у другого пользователя;\nизображения можно вставлять, пользуясь непосредственно разметкой html.\n\n&lt;img src=\"images/my_image.jpg\" width=40%&gt;\n\n\n8.5.6 Блоки кода\nМожно вставлять непосредственно в текст; для этого код выделяют одинарным обратным апострофом (грависом). Но чаще код дают отдельным блоком. Эти блоки можно именовать; тогда в случае ошибки будет сразу понятно, где она случилась.\n```{}\nsome code here\n```\nВ фигурных скобках надо указать язык, например {r}, только в этом случае код будет подсвечиваться и выполняться.\nТам же в фигурных скобках можно задать следующие параметры:\n\neval = FALSE код будет показан, но не будет выполняться;\ninclude = FALSE код будет выполнен, но ни код, ни результат не будут показаны;\necho = FALSE код будет выполнен, но не показан, результаты при этом видны;\nmessage = FALSE или warning = FALSE прячет сообщения или предупреждения;\nresults = 'hide' не распечатывает результат, а fig.show = 'hide' прячет графики;\nerror = TRUE “сшивание” продолжается, даже если этот блок вернул ошибку.\n\n\n\n8.5.7 Цитаты\n&gt; Omnia praeclara rara.\nПример:\n\nOmnia praeclara rara.\n\nЦитата с подписью может быть оформлена так:\n&gt; Omnia praeclara rara.\n&gt;\n&gt; --- Cicero\nПример:\n\nOmnia praeclara rara.\n— Cicero\n\n\n\n8.5.8 Разделители\nЧтобы создать горизонтальную линию, можно использовать ---, *** или ___.\nПример:\n\n\n\n8.5.9 Таблицы\nТаблицы можно задать вручную при помощи дефисов - и вертикальных линий |; идеальная точность при этом не нужна. Перед таблицей обязательно оставляйте пустую строку, иначе волшебство не сработает.\n\n| Фрукты   | Калории  |\n| -----  | ---- |\n| Яблоко   | 52  |\n| Апельсин | 47  |\nПример:\n\n\n\nФрукты\nКалории\n\n\n\n\nЯблоко\n52\n\n\nАпельсин\n47\n\n\n\nПо умолчанию Markdown распечатывает таблицы так, как они бы выглядели в консоли.\n\ndata(\"iris\")\nhead(iris)\n\n\n  \n\n\n\nДля дополнительного форматирования можно использовать функцию knitr::kable():\n\nknitr::kable(iris[1:6, ], caption = \"Таблица knitr\")\n\n\nТаблица knitr\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n5.4\n3.9\n1.7\n0.4\nsetosa\n\n\n\n\n\nИнтерактивную таблицу можно создать так:\n\nDT::datatable(iris[1:6,])\n\n\n\n\n\n\n\n8.5.10 Чек-листы\n- [x] Таблицы\n- [ ] Графики\nПример:\n\nТаблицы\nГрафики\n\n\n\n8.5.11 Внутренние ссылки\nУдобны для навигации по документу. К названию любого раздела можно добавить {#id}.\n[Вернуться к чек-листам](#id)\nПример:\nВернуться к чек-листам\n\n\n8.5.12 Графики\nMarkdown позволяет встраивать любые графики.\n\nlibrary(ggplot2)\nggplot(aes(x = Sepal.Length, y = Petal.Length, col = Species), data = iris) +\n  geom_point(show.legend = F)\n\n\n\n\n\n\n\n\nДля интерактивных графиков понадобится пакет plotly:\n\nlibrary(plotly)\nplot_ly(data=iris, x = ~Sepal.Length, y = ~Petal.Length, color = ~Species)\n\n\n\n\n\nПодробное руководство по созданию интерактивных графиков можно найти на сайте https://plotly.com/r/.\n\n\n8.5.13 Математические формулы\nПишутся с использованием синтаксиса LaTeX, о котором можно прочитать подробнее здесь.\nФормулы заключаются в одинарный $, если пишутся в строку, и в двойной $$, если отдельным блоком.\n\\cos (2\\theta) = \\cos^2 \\theta - \\sin^2 \\theta\nВот так это выглядит в тексте: \\(\\cos (2\\theta) = \\cos^2 \\theta - \\sin^2 \\theta\\).\nА вот так – блоком:\n\\[\\cos (2\\theta) = \\cos^2 \\theta - \\sin^2 \\theta\\]\n\n\n8.5.14 Смайлы\nУдобнее вставлять через визуальный редактор (“шестеренка” &gt; Use Visual Editor), но можно и без него:\n\n# devtools::install_github(\"hadley/emo\")\nlibrary(emo)\nemo::ji(\"apple\")\n\n🍎 \n\n\nКод можно записать в строку, тогда смайл появится в тексте: 💀.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Публикационная система Quarto</span>"
    ]
  },
  {
    "objectID": "08_share.html#библиография",
    "href": "08_share.html#библиография",
    "title": "8  Публикационная система Quarto",
    "section": "8.6 Библиография",
    "text": "8.6 Библиография\nMarkdown позволяет добавлять библиографию в формате BibTeX. BibTeX — программное обеспечение для создания форматированных списков библиографии; обычно используется совместно с LaTeX’ом. Многие сайты, например GoogleScholar, позволяют экспортировать библиографические записи в формате BibTeX. При необходимости запись можно исправить вручную.\nКаждая запись имеет следующую форму.\n@book{winter2020,\n  author = {Bodo Winter},\n  title = \"{Statistics for Linguists: An Introduction Using R}\",\n  year = {2020},\n  publisher = {Routledge}\n}\nЗдесь book — тип записи («книга»), winter2020 — метка-идентификатор записи, дальше список полей со значениями.\nОдна запись описывает ровно одну публикацию статью, книгу, диссертацию, и т. д. Подробнее о типах записей можно посмотреть вот здесь.\nПодобные записи хранятся в текстовом файле с расширением .bib. Чтобы привязать библиографию, нужно указать имя файла в шапке yaml.\n---\nbibliography: bibliography.bib\n---\nДальше, чтобы добавить ссылку, достаточно ввести ключ публикации после @ (в квадратных скобках, чтобы публикация отражалась в круглых): [@wickham2016].\nПример:\n(Wickham и Grolemund 2016).\nМожно интегрировать BibTex с Zotero или другим менеджером библиографии. Для этого придется установить специальное расширение.\nЧтобы изменить стиль цитирования, необходимо добавить в шапку yaml название csl-файла (CSL - Citation Style Language), например:\n---\noutput: html_document\nbibliography: references.bib\ncsl: archiv-fur-geschichte-der-philosophie.csl\n---\nНайти необходимый csl-файл можно, например, в репозитории стилей Zotero.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Публикационная система Quarto</span>"
    ]
  },
  {
    "objectID": "08_share.html#публикация-html",
    "href": "08_share.html#публикация-html",
    "title": "8  Публикационная система Quarto",
    "section": "8.7 Публикация html",
    "text": "8.7 Публикация html\nДля публикации на RPubs понадобится установить пакеты packrat, rsconnect.\nПри публикации страницы на https://rpubs.com/ следует добавить в шапку две строчки:\n\n---\nembed-resources: true\nstandalone: true\n---\n\nЭто позволит корректно отобразить локальные фото, графики и сохранит оформление.\n\n\n\n\nWickham, Hadley, и Garrett Grolemund. 2016. R for Data Science. O’Reilly. https://r4ds.had.co.nz/index.html.\n\n\nWinter, Bodo. 2020. Statistics for Linguists: An Introduction Using R. Routledge.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Публикационная система Quarto</span>"
    ]
  }
]