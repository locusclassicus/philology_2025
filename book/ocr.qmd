# Распознавание изображений

В этом уроке мы освоим основной инструмент для распознавания печатного текста в R – пакет `tesseract`, а также научимся дообучать модели под конкретные задачи и шрифты.

## Что такое OCR и tesseract

CR (Optical Character Recognition) — это технология автоматического распознавания печатного текста на изображениях и преобразования его в машинно-читаемый формат. Эта технология позволяет “извлекать” текст из сканированных документов, фотографий, PDF-файлов и других графических форматов.

Tesseract — это одна из самых популярных библиотек OCR с открытым исходным кодом, разработанная компанией Google. Tesseract поддерживает более 100 языков и может работать с различными типами изображений и форматами документов.

Пакет `tesseract` в R представляет собой обертку для библиотеки Tesseract, которая позволяет:

- Распознавать текст с изображений различных форматов (PNG, JPEG, TIFF, PDF)
- Работать с многостраничными документами
- Использовать предобученные модели для разных языков (список)
- Настраивать параметры распознавания под конкретные задачи
- Дообучать модели для улучшения качества распознавания специфических шрифтов или типов документов

В отличие от онлайн-сервисов OCR, пакет tesseract работает локально, что обеспечивает:

- Конфиденциальность — данные не передаются третьим лицам
- Скорость — нет задержек на передачу данных по сети
- Настраиваемость — возможность тонкой настройки под конкретные задачи
- Интеграция — seamless integration с экосистемой R для дальнейшего анализа данных

Однако качество распознавания сильно зависит от качества исходного изображения, типа шрифта, языка документа и правильности настройки параметров. Именно поэтому важно уметь не только использовать готовые модели, но и дообучать их под специфические задачи.

## Данные

В качестве упражнения мы возьмем ч. 6 № 6 журнала “Невский зритель” за 1821 г. ([источник](http://lib.pushkinskijdom.ru/Default.aspx?tabid=11373)).

Журнал «Невский зритель» издавался в Петербурге ежемесячно с января 1820 г. по июнь 1821 г. Всего вышло 18 книжек журнала, составивших 6 частей. Все они доступны на сайте “Пушкинского дома”.

Официальным издателем журнала был выпускник Московского университета Иван Матвеевич Сниткин (род. ок. 1792 г.). С января по апрель 1820 г. соиздателем «Невского зрителя» был В. К. Кюхельбекер; намеревался войти в число издателей и К. Ф. Рылеев (1797-1826), активный сотрудник журнала с октября 1820-го по февраль 1821 г.

В научной литературе не сложилось единого взгляда на идеологическую и литературно-критическую направленность журнала.

Разногласия в оценках объясняются противоречивостью статей, помещенных на страницах журнала за время его существования. Некоторые исследователи относят «Невский зритель» к кругу изданий декабристской ориентированности. «Невский зритель» оказался заметным явлением в журналистике 20-х гг. 19-го века, в нем печатались произведения Пушкина: стихотворения «Дориде» (№ 1. С. 96), «Дорида» (№ 2. С. 92), «Кюхельбекеру» («В последний раз, в сени уединенья»), «Прелестнице», «Мадригал М…ой» (все три: № 4. С. 66-68), отрывок из первой песни «Руслана и Людмилы», стихотворения Кюхельбекера, Жуковского, Баратынского, Дельвига, Рылеева, поместившего в октябрьской книжке 1820 г. острейшую сатиру на Аракчеева «К временщику».

Современные исследователи «Невского зрителя» выделяют два периода в эволюции журнала. Первый - январь-апрель 1820 г. Ведущий сотрудник в разделах «Литература» и «Критика» - Кюхельбекер; активно печатаются Пушкин, Баратынский, Дельвиг. Второй период - май-сентябрь 1820 г. Полностью прекращается сотрудничество с журналом всей группы молодых литераторов. Журнал наводняется эпигонскими произведениями Д. Хвостова, Ф. Синельникова, Г. П. Кругликова и М. А. Яковлева. В разделе «Критика» звучат громкие дифирамбы Хвостову. В этот же период появляется статья о «Руслане и Людмиле» с резкими нападками на поэму. ([Источник описания](https://www.gorkilib.ru/events/200-let-zhurnalu-nevskiy-zritel).)

## Вырезать страницы

```{r}
library(qpdf)
my_files <- list.files("../ocr", pattern = "pdf", full.names = TRUE)
my_files
```

```{r}
pdf_subset(input = my_files[2],
           output = "../ocr/НЗ1821_6_6[50-51].pdf",
           pages = 50:51)
```


:::{layout-ncol=2}

![](./images/rosalia1.png)

![](./images/rosalia2.png)

:::


## Извлечение текста из pdf

Если вам повезло, то pdf хранит уже распознанный текст.

```{r}
library(pdftools)
library(tesseract)
text1 <- pdf_text(pdf = "../ocr/НЗ1821_6_6[50-51].pdf")
cat(text1)
```


Текст распознан достаточно хорошо, есть мелкие ошибки, но их можно исправить (о чем речь пойдет в следующем уроке). Если необходимо сохранить извлеченный из pdf текст для дальнейшей работы, это делается так:

```{r eval=FALSE}
writeLines(text1, con = "../ocr/rosalia.txt")
```

## Распознавание

Если текст не распознан (притворимся, что так и есть), то можно попробовать распознать при помощи tesseract. Однако есть нюанс: tesseract не знает дореформенного русского. Это значит, что все яти (ѣ), еры (ъ), фита (Ѳ) и десятеричное и (і) превратятся во что-то другое. А еще трудности бывают с буквой “т”, т.к. в XIX в. ее печатали по-другому.

Проверим. Но прежде всего, надо скачать модель для русского языка. Это делается один раз. Кстати, тессеракт способен “читать” тексты на нескольких языках, для этого передаем значение аргументу language так: “rus+deu”.

```{r}
# tesseract_download("rus")
text2 <- pdf_ocr_text("../ocr/НЗ1821_6_6[50-51].pdf", language = "rus")
cat(text2)
```

Что в таких случаях делать?

- Первое: проверить, нет ли обученных моделей, которые справятся с вашей задачей. Я попробовала, например, [модель](https://huggingface.co/Serovvans/trocr-prereform-orthography) для распознавания дореформенной орфографии с Hugging Face, но результат оказался очень печальным, я даже не буду его показывать. Это может быть связано с тем, что шрифт в нашем журнале отличается от тех, на которых учили модель.

- Обученные модели можно также поискать в Транскрибусе (например, [здесь](https://app.transkribus.org/models/public/text/russian-print-xviii-cent) и [здесь](https://app.transkribus.org/models/public/text/44358)). Чтобы воспользоваться готовыми приложениями для распознавания шрифта, pdf надо преобразовать в картинку. Попробуйте.

```{r}
pdf_convert("../ocr/НЗ1821_6_6[50-51].pdf", 
            format = "png", 
            dpi = 300,
            pages = NULL,  # все страницы, или c(1,3,5) для конкретных
            filenames = NULL)
```

Результат неплохой, и для небольших проектов подойдет. Но у Транскрибуса есть ряд ограничений: модели нельзя использовать локально, расширенный функционал платный, и др.

> Transkribus — платформа для оцифровки и распознавания текста на основе технологии HTR (Handwritten Text Recognition), которая позволяет обучать специальные модули (англ. models) распознавания текста. Обученные модули способны распознавать рукописные, машинописные и печатные документы на самых разных языках, в частности, на классическом сирийском — одном из главных языков восточного христианства. ([Источник](https://sysblok.ru/digital-heritage/transkribus-kak-kompjuternoe-zrenie-pomogaet-perevodit-teksty-sirijskih-mistikov/))

- Наконец, можно дообучить уже существующую модель `tesseract`, как показано вот в этом [примере](https://arcruz0.github.io/posts/finetuning-tess/index.html).

## Файн-тюнинг

Начиная с версии 4, Tesseract использует нейронную сеть для распознавания текста, что позволяет дообучать модель для конкретных задач.

Для дообучения необходимы эталонные данные — фрагменты изображений с соответствующим им текстом.

### Подготовка обучающих данных

**Шаг 1: Подготовка изображений**

Создайте папку с именем `{язык}-ground-truth/` (например, `orus-ground-truth/`) и поместите туда скриншоты текста. Названия файлов могут быть любыми.

В моем случае – это все пять скриншотов, лучше сделать несколько десятков. Выглядят они так:

![](images/ground_truth1.png)
![](images/ground_truth2.png)
NB: Более продвинутый подход к нарезке изображений см. [здесь](https://github.com/ukolshurika/finetune-ocr-sample). Разрезать изображение на отдельные слова можно и в R – пример мы рассмотрим на занятии.

![](images/words_view.png)
**Шаг 2: Использование пакета `tesseractgt`**

Теперь для каждого изображения добавим текст (файлы в формате `.gt.txt`). Для ускорения процесса создания эталонных файлов можно использовать специальный пакет:

```{r}
# install.packages("remotes")
remotes::install_github("arcruz0/tesseractgt")
```

Для создания таких файлов используем базовую модель.

```{r}
library(tesseractgt)
create_gt_txt(
  folder = "../ocr/orus-ground-truth",
  extension = "png", 
  engine = tesseract::tesseract(language = "rus")
)
```

Убедитесь, что файлы появились в директории.

**Шаг 3: Корректировка текстовых файлов**

Исправьте автоматически созданные файлы `.gt.txt` вручную:

```{r eval=FALSE}
correct_gt_txt() 
```

![](https://arcruz0.github.io/posts/finetuning-tess/imgs/addin.gif)
Если не видно папки с изображениями, смените рабочую директорию.

## Процесс дообучения

1. Клонируйте репозиторий `tesstrain`:

```{r eval=FALSE}
git clone https://github.com/tesseract-ocr/tesstrain.git
cd tesstrain
make tesseract-langdata
```

2. Переместите папку с данными:

```{r eval=FALSE}
mv ~/location/alg-ground-truth data
```

3. Запуск дообучения

```{r eval=FALSE}
make training MODEL_NAME=alg START_MODEL=eng FINETUNE_TYPE=Impact
```

На этом этапе у меня возникли сложности из-за того, что не был установлен make, также пришлось добавить аргумент LANG_TYPE.

```{r eval=FALSE}
brew install make # для Mac
gmake training MODEL_NAME=orus START_MODEL=rus FINETUNE_TYPE=Impact LANG_TYPE=Both
```

Дообучение занимает несколько минут.

###Установка модели

Найдите системную папку Tesseract:

```{r}
tesseract::tesseract_info()$datapath
```

Скопируйте сюда новую модель `orus.traindata`.

Проверьте доступные модели:

```{r}
tesseract::tesseract_info()$available
```

После дообучения можно использовать новую модель:

```{r}
text3 <- pdf_ocr_text("../ocr/НЗ1821_6_6[50-51].pdf", language = "orus")
cat(text3)
```

Таким образом, дообучение Tesseract позволяет улучшить качество распознавания специализированных текстов; для лучшего результата используйте больше обучающих данных (чем больше, тем лучше). Пакет `tesseractgt` существенно упрощает процесс подготовки обучающих данных.