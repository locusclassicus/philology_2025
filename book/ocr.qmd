# Распознавание изображений

В этом уроке мы освоим основной инструмент для распознавания печатного текста в R – пакет `tesseract`, а также научимся дообучать модели под конкретные задачи и шрифты. Для работы нам понадобятся следующие библиотеки:

```{r}
library(qpdf)
library(pdftools)
library(tesseract)
library(tesseractgt)
```

## Что такое OCR и tesseract

OCR (Optical Character Recognition) — это технология автоматического распознавания печатного текста на изображениях и преобразования его в машинно-читаемый формат. Эта технология позволяет “извлекать” текст из сканированных документов, фотографий, PDF-файлов и других графических форматов.

[Tesseract](https://ru.wikipedia.org/wiki/Tesseract) — это одна из самых популярных библиотек OCR с открытым исходным кодом, разработанная компанией Google. Tesseract поддерживает более 100 языков и может работать с различными типами изображений и форматами документов.

Пакет `tesseract` в R представляет собой обертку для библиотеки Tesseract, которая позволяет:

- Распознавать текст с изображений различных форматов (PNG, JPEG, TIFF, PDF);
- Работать с многостраничными документами;
- Использовать предобученные модели для разных языков; ([список](https://tesseract-ocr.github.io/tessdoc/Data-Files-in-different-versions.html));
- Настраивать параметры распознавания под конкретные задачи;
- Дообучать модели для улучшения качества распознавания специфических шрифтов или типов документов.

В отличие от онлайн-сервисов OCR, пакет `tesseract` работает локально, что обеспечивает:

- Конфиденциальность — данные не передаются третьим лицам;
- Скорость — нет задержек на передачу данных по сети;
- Настраиваемость — возможность тонкой настройки под конкретные задачи;
- Бесшовную интеграцию с экосистемой R для дальнейшего анализа данных.

Однако качество распознавания сильно зависит от качества исходного изображения, типа шрифта, языка документа и правильности настройки параметров. Именно поэтому важно уметь не только использовать готовые модели, но и дообучать их под специфические задачи.

## Данные

В качестве упражнения мы возьмем ч. 6 № 6 журнала “Невский зритель” за 1821 г. ([источник](http://lib.pushkinskijdom.ru/Default.aspx?tabid=11373)).

Журнал «Невский зритель» издавался в Петербурге ежемесячно с января 1820 г. по июнь 1821 г. Всего вышло 18 книжек журнала, составивших 6 частей. Все они доступны на сайте “Пушкинского дома”.

> Официальным издателем журнала был выпускник Московского университета Иван Матвеевич Сниткин (род. ок. 1792 г.). С января по апрель 1820 г. соиздателем «Невского зрителя» был В. К. Кюхельбекер; намеревался войти в число издателей и К. Ф. Рылеев (1797-1826), активный сотрудник журнала с октября 1820-го по февраль 1821 г. В разное время в журнале печатались произведения Пушкина, Кюхельбекера, Жуковского, Баратынского, Дельвига, а также Рылеева, поместившего в октябрьской книжке 1820 г. острейшую сатиру на Аракчеева «К временщику». ([Источник](https://www.gorkilib.ru/events/200-let-zhurnalu-nevskiy-zritel).)

## Выбор страниц

Для начала вырежем несколько страниц из pdf. Таким образом вы легко можете делить любые издания на главы, разделы и т.д.

```{r}
my_files <- list.files("../ocr", pattern = "pdf", full.names = TRUE)
my_files[2] # нужный файл
```

```{r eval=FALSE}
pdf_subset(input = my_files[2],
           output = "../ocr/НЗ1821_6_6[50-51].pdf",
           pages = 50:51)
```


:::{layout-ncol=2}

![](./images/rosalia1.png)

![](./images/rosalia2.png)

:::

:::{.callout-tip icon=false}
Найдите в метаданных к корпусу русских элегий предположительную фамилию автора.
:::

Ответ: `r fitb("Бадульф")`.

## Извлечение текста из pdf

Если вам повезло, то pdf хранит уже распознанный текст.

```{r}

text1 <- pdf_text(pdf = "../ocr/НЗ1821_6_6[50-51].pdf")
cat(text1)
```


Текст распознан достаточно хорошо, есть мелкие ошибки, но их можно исправить (о чем речь пойдет в следующем уроке). Если необходимо сохранить извлеченный из pdf текст для дальнейшей работы, это делается так:

```{r eval=FALSE}
writeLines(text1, con = "../ocr/rosalia.txt")
```

## Распознавание

Если текст не распознан (притворимся, что так и есть), то можно попробовать распознать при помощи `tesseract`. Однако есть нюанс: `tesseract` не знает дореформенного русского. Это значит, что все яти (ѣ), еры (ъ), фиты (Ѳ) и десятеричные и (і) превратятся во что-то странное. А еще трудности бывают с буквой "т", т.к. в XIX в. ее печатали по-другому.

Проверим. Но прежде всего надо скачать модель для русского языка. Это делается один раз. Кстати, тессеракт способен "читать" тексты на нескольких языках, для этого передаем значение аргументу language так: `"rus+deu"`.

```{r eval=FALSE}
# tesseract_download("rus")
text2 <- pdf_ocr_text("../ocr/НЗ1821_6_6[50-51].pdf", language = "rus")
cat(text2)

# Converting page 1 to НЗ1821_6_6[50-51]_1.png... done!
# Converting page 2 to НЗ1821_6_6[50-51]_2.png... done!

# 999939993993999999339993399999939939 9039303939
# РАЗЛУКА.
# (Элегтя.)
# ————-
# Розамя, мой спушникъь неизмённый
# На полЪ радосшей земныхь!
# Розал!я, мой другь, хранишель несравненный!
# Когда я ошдохну въ объяпияхь швоихъ?...
# Съ шобою горестей душа моя незнаеть,
# И сердцу скорбному не измЪнить покой!
# Надежда мрачный пушь звЪздою озаряепть,
# И я мирюсь съ враждебною судьбой!...
# ’Геперь, за дальними, свиофпыми морями
# Твой сладк!й гласъ не оживишьъ меня!
# Взойдеть заря надъ злачными холмами,
# Появишся въ лучахъ свЪшило дня —
# Напрасно! все кругомъ покрыпю мглою.
# Неслышишся мнЪ сладюй тивой привЪфить,
# ВсЪ5 радосши, надежды всЪ съ шобою —
# И опусш$ль безъ милой свЪзить’
# Подруга милая, скажи, чшо край прелесшный,
# Чпо мирвыя, тифвисптыя поля,
# Чтпо своенравныя судьбы привЪтьъ мн лесшный,
# Когда съ шобой въ разлук я.
# Но другь мой! горесмь ошленаепть
#  245
# На бысшрыхь времени крылахь,
# И радосшь сердце посфщаеть....
# Моя надежда — въ небесахь!...
# Когдажъ опяшь смягченными судьбами
# Я въ радосши къ подругЪ понесусь,
# Коснусь волшебныхь сшрунь волшебными пер-
# сшами
# И, сь рфзвою мечтшою примирюсь.
# Я, Б — $5.
```

Что в таких случаях делать?

- Первое: проверить, нет ли обученных моделей, которые справятся с вашей задачей. Можно поискать, например, [модели](https://huggingface.co/Serovvans/trocr-prereform-orthography) на Hugging Face. Но результат может будет зависеть от того, на каких шрифтах учили модель.

- Второе: обученные модели можно также поискать в [Транскрибусе](https://sysblok.ru/digital-heritage/transkribus-kak-kompjuternoe-zrenie-pomogaet-perevodit-teksty-sirijskih-mistikov/) (например, [здесь](https://app.transkribus.org/models/public/text/russian-print-xviii-cent) и [здесь](https://app.transkribus.org/models/public/text/44358)). Но у Транскрибуса есть ряд ограничений: модели нельзя использовать локально, расширенный функционал платный, и др. Бесплатно можно пользоваться готовыми приложениями; однако сначала pdf придется преобразовать в картинку. 

```{r eval=FALSE}
pdf_convert("../ocr/НЗ1821_6_6[50-51].pdf", 
            format = "png", 
            dpi = 300,
            pages = NULL,  # все страницы, или c(1,3,5) для конкретных
            filenames = NULL)
```


- Наконец, можно дообучить уже существующую модель `tesseract`, как показано вот в этом [примере](https://arcruz0.github.io/posts/finetuning-tess/index.html). Этим мы сейчас и займемся.

## Файн-тюнинг

Начиная с версии 4, Tesseract использует нейронную сеть для распознавания текста, что позволяет дообучать модель для конкретных задач. Для дообучения необходимы эталонные данные — фрагменты изображений с соответствующим им текстом.

### Подготовка обучающих данных

**Шаг 1: Подготовка изображений**

Создайте папку с именем `{язык}-ground-truth/` (например, `orus-ground-truth/`) и поместите туда скриншоты текста. Названия файлов могут быть любыми.

В моем случае – это все пять скриншотов, лучше сделать несколько десятков. Выглядят они так:

![](images/ground_truth1.png)
![](images/ground_truth2.png)
NB: Более продвинутый подход к нарезке изображений см. [здесь](https://github.com/ukolshurika/finetune-ocr-sample). Разрезать изображение на отдельные слова можно и в R – пример мы рассмотрим на занятии.

![](images/words_view.png)
**Шаг 2: Использование пакета `tesseractgt`**

Теперь для каждого изображения добавим текст (файлы в формате `.gt.txt`). Для ускорения процесса создания эталонных файлов можно использовать специальный пакет:

```{r}
# install.packages("remotes")
remotes::install_github("arcruz0/tesseractgt")
```

Для создания таких файлов используем базовую модель.

```{r}
create_gt_txt(
  folder = "../ocr/orus-ground-truth",
  extension = "png", 
  engine = tesseract::tesseract(language = "rus")
)
```

Убедитесь, что файлы появились в директории.

**Шаг 3: Корректировка текстовых файлов**

Исправьте автоматически созданные файлы `.gt.txt` вручную:

```{r eval=FALSE}
correct_gt_txt() 
```

![](https://arcruz0.github.io/posts/finetuning-tess/imgs/addin.gif)
Если не видно папки с изображениями, смените рабочую директорию.

### Процесс дообучения

1. Клонируйте репозиторий `tesstrain`:

```{r eval=FALSE}
git clone https://github.com/tesseract-ocr/tesstrain.git
cd tesstrain
make tesseract-langdata
```

2. Переместите папку с данными:

```{r eval=FALSE}
mv ~/location/alg-ground-truth data
```

3. Запуск дообучения

```{r eval=FALSE}
make training MODEL_NAME=alg START_MODEL=eng FINETUNE_TYPE=Impact
```

На этом этапе у меня возникли сложности из-за того, что не был установлен make, также пришлось добавить аргумент LANG_TYPE.

```{r eval=FALSE}
brew install make # для Mac
gmake training MODEL_NAME=orus START_MODEL=rus FINETUNE_TYPE=Impact LANG_TYPE=Both
```

Дообучение занимает несколько минут.

### Установка модели

Найдите системную папку Tesseract:

```{r}
tesseract::tesseract_info()$datapath
```

Скопируйте сюда новую модель `orus.traindata`.

Проверьте доступные модели:

```{r}
tesseract::tesseract_info()$available
```

После дообучения можно использовать новую модель:

```{r}
text3 <- pdf_ocr_text("../ocr/НЗ1821_6_6[50-51].pdf", language = "orus")
cat(text3)
```

Таким образом, дообучение Tesseract позволяет улучшить качество распознавания специализированных текстов; для лучшего результата используйте больше обучающих данных (чем больше, тем лучше). Пакет `tesseractgt` существенно упрощает процесс подготовки обучающих данных.

## Видео к этому уроку

```{r echo=FALSE}
library(cowsay)
say("Будет добавлено позже", "cat")
```

## Домашнее задание

```{r echo=FALSE}
say("Будет добавлено позже", "owl")
```